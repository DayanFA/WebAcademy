// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package sgcm_turma4.etl_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ETL Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class ETL implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ETL";
	private final String projectName = "SGCM_TURMA4";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ETL.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ETL.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_convenio_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_paciente_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_profissional_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_especialidade_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_unidade_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_SGCM_TURMA4_ETL = new byte[0];
    static byte[] commonByteArray_SGCM_TURMA4_ETL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long atendimento_id;

				public long getAtendimento_id () {
					return this.atendimento_id;
				}
				
			    public java.util.Date atendimento_data;

				public java.util.Date getAtendimento_data () {
					return this.atendimento_data;
				}
				
			    public String atendimento_hora;

				public String getAtendimento_hora () {
					return this.atendimento_hora;
				}
				
			    public String atendimento_status;

				public String getAtendimento_status () {
					return this.atendimento_status;
				}
				
			    public int atendimento_dia_da_semana;

				public int getAtendimento_dia_da_semana () {
					return this.atendimento_dia_da_semana;
				}
				
			    public int atendimento_semana_no_mes;

				public int getAtendimento_semana_no_mes () {
					return this.atendimento_semana_no_mes;
				}
				
			    public int atendimento_mes;

				public int getAtendimento_mes () {
					return this.atendimento_mes;
				}
				
			    public String profissional_nome;

				public String getProfissional_nome () {
					return this.profissional_nome;
				}
				
			    public String especialidade_nome;

				public String getEspecialidade_nome () {
					return this.especialidade_nome;
				}
				
			    public String unidade_nome;

				public String getUnidade_nome () {
					return this.unidade_nome;
				}
				
			    public String convenio_nome;

				public String getConvenio_nome () {
					return this.convenio_nome;
				}
				
			    public String paciente_nome;

				public String getPaciente_nome () {
					return this.paciente_nome;
				}
				
			    public String paciente_sexo;

				public String getPaciente_sexo () {
					return this.paciente_sexo;
				}
				
			    public String paciente_grupo_sanguineo;

				public String getPaciente_grupo_sanguineo () {
					return this.paciente_grupo_sanguineo;
				}
				
			    public java.util.Date paciente_data_nascimento;

				public java.util.Date getPaciente_data_nascimento () {
					return this.paciente_data_nascimento;
				}
				
			    public boolean paciente_ausente;

				public boolean getPaciente_ausente () {
					return this.paciente_ausente;
				}
				
			    public long paciente_idade;

				public long getPaciente_idade () {
					return this.paciente_idade;
				}
				
			    public String paciente_faixa_etaria;

				public String getPaciente_faixa_etaria () {
					return this.paciente_faixa_etaria;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.atendimento_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.atendimento_id != other.atendimento_id)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.atendimento_id = this.atendimento_id;
	            other.atendimento_data = this.atendimento_data;
	            other.atendimento_hora = this.atendimento_hora;
	            other.atendimento_status = this.atendimento_status;
	            other.atendimento_dia_da_semana = this.atendimento_dia_da_semana;
	            other.atendimento_semana_no_mes = this.atendimento_semana_no_mes;
	            other.atendimento_mes = this.atendimento_mes;
	            other.profissional_nome = this.profissional_nome;
	            other.especialidade_nome = this.especialidade_nome;
	            other.unidade_nome = this.unidade_nome;
	            other.convenio_nome = this.convenio_nome;
	            other.paciente_nome = this.paciente_nome;
	            other.paciente_sexo = this.paciente_sexo;
	            other.paciente_grupo_sanguineo = this.paciente_grupo_sanguineo;
	            other.paciente_data_nascimento = this.paciente_data_nascimento;
	            other.paciente_ausente = this.paciente_ausente;
	            other.paciente_idade = this.paciente_idade;
	            other.paciente_faixa_etaria = this.paciente_faixa_etaria;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.atendimento_id = this.atendimento_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SGCM_TURMA4_ETL.length) {
				if(length < 1024 && commonByteArray_SGCM_TURMA4_ETL.length == 0) {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[1024];
				} else {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SGCM_TURMA4_ETL, 0, length);
			strReturn = new String(commonByteArray_SGCM_TURMA4_ETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SGCM_TURMA4_ETL.length) {
				if(length < 1024 && commonByteArray_SGCM_TURMA4_ETL.length == 0) {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[1024];
				} else {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SGCM_TURMA4_ETL, 0, length);
			strReturn = new String(commonByteArray_SGCM_TURMA4_ETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.atendimento_id = dis.readLong();
					
					this.atendimento_data = readDate(dis);
					
					this.atendimento_hora = readString(dis);
					
					this.atendimento_status = readString(dis);
					
			        this.atendimento_dia_da_semana = dis.readInt();
					
			        this.atendimento_semana_no_mes = dis.readInt();
					
			        this.atendimento_mes = dis.readInt();
					
					this.profissional_nome = readString(dis);
					
					this.especialidade_nome = readString(dis);
					
					this.unidade_nome = readString(dis);
					
					this.convenio_nome = readString(dis);
					
					this.paciente_nome = readString(dis);
					
					this.paciente_sexo = readString(dis);
					
					this.paciente_grupo_sanguineo = readString(dis);
					
					this.paciente_data_nascimento = readDate(dis);
					
			        this.paciente_ausente = dis.readBoolean();
					
			        this.paciente_idade = dis.readLong();
					
					this.paciente_faixa_etaria = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.atendimento_id = dis.readLong();
					
					this.atendimento_data = readDate(dis);
					
					this.atendimento_hora = readString(dis);
					
					this.atendimento_status = readString(dis);
					
			        this.atendimento_dia_da_semana = dis.readInt();
					
			        this.atendimento_semana_no_mes = dis.readInt();
					
			        this.atendimento_mes = dis.readInt();
					
					this.profissional_nome = readString(dis);
					
					this.especialidade_nome = readString(dis);
					
					this.unidade_nome = readString(dis);
					
					this.convenio_nome = readString(dis);
					
					this.paciente_nome = readString(dis);
					
					this.paciente_sexo = readString(dis);
					
					this.paciente_grupo_sanguineo = readString(dis);
					
					this.paciente_data_nascimento = readDate(dis);
					
			        this.paciente_ausente = dis.readBoolean();
					
			        this.paciente_idade = dis.readLong();
					
					this.paciente_faixa_etaria = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.atendimento_id);
					
					// java.util.Date
				
						writeDate(this.atendimento_data,dos);
					
					// String
				
						writeString(this.atendimento_hora,dos);
					
					// String
				
						writeString(this.atendimento_status,dos);
					
					// int
				
		            	dos.writeInt(this.atendimento_dia_da_semana);
					
					// int
				
		            	dos.writeInt(this.atendimento_semana_no_mes);
					
					// int
				
		            	dos.writeInt(this.atendimento_mes);
					
					// String
				
						writeString(this.profissional_nome,dos);
					
					// String
				
						writeString(this.especialidade_nome,dos);
					
					// String
				
						writeString(this.unidade_nome,dos);
					
					// String
				
						writeString(this.convenio_nome,dos);
					
					// String
				
						writeString(this.paciente_nome,dos);
					
					// String
				
						writeString(this.paciente_sexo,dos);
					
					// String
				
						writeString(this.paciente_grupo_sanguineo,dos);
					
					// java.util.Date
				
						writeDate(this.paciente_data_nascimento,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.paciente_ausente);
					
					// long
				
		            	dos.writeLong(this.paciente_idade);
					
					// String
				
						writeString(this.paciente_faixa_etaria,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.atendimento_id);
					
					// java.util.Date
				
						writeDate(this.atendimento_data,dos);
					
					// String
				
						writeString(this.atendimento_hora,dos);
					
					// String
				
						writeString(this.atendimento_status,dos);
					
					// int
				
		            	dos.writeInt(this.atendimento_dia_da_semana);
					
					// int
				
		            	dos.writeInt(this.atendimento_semana_no_mes);
					
					// int
				
		            	dos.writeInt(this.atendimento_mes);
					
					// String
				
						writeString(this.profissional_nome,dos);
					
					// String
				
						writeString(this.especialidade_nome,dos);
					
					// String
				
						writeString(this.unidade_nome,dos);
					
					// String
				
						writeString(this.convenio_nome,dos);
					
					// String
				
						writeString(this.paciente_nome,dos);
					
					// String
				
						writeString(this.paciente_sexo,dos);
					
					// String
				
						writeString(this.paciente_grupo_sanguineo,dos);
					
					// java.util.Date
				
						writeDate(this.paciente_data_nascimento,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.paciente_ausente);
					
					// long
				
		            	dos.writeLong(this.paciente_idade);
					
					// String
				
						writeString(this.paciente_faixa_etaria,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("atendimento_id="+String.valueOf(atendimento_id));
		sb.append(",atendimento_data="+String.valueOf(atendimento_data));
		sb.append(",atendimento_hora="+atendimento_hora);
		sb.append(",atendimento_status="+atendimento_status);
		sb.append(",atendimento_dia_da_semana="+String.valueOf(atendimento_dia_da_semana));
		sb.append(",atendimento_semana_no_mes="+String.valueOf(atendimento_semana_no_mes));
		sb.append(",atendimento_mes="+String.valueOf(atendimento_mes));
		sb.append(",profissional_nome="+profissional_nome);
		sb.append(",especialidade_nome="+especialidade_nome);
		sb.append(",unidade_nome="+unidade_nome);
		sb.append(",convenio_nome="+convenio_nome);
		sb.append(",paciente_nome="+paciente_nome);
		sb.append(",paciente_sexo="+paciente_sexo);
		sb.append(",paciente_grupo_sanguineo="+paciente_grupo_sanguineo);
		sb.append(",paciente_data_nascimento="+String.valueOf(paciente_data_nascimento));
		sb.append(",paciente_ausente="+String.valueOf(paciente_ausente));
		sb.append(",paciente_idade="+String.valueOf(paciente_idade));
		sb.append(",paciente_faixa_etaria="+paciente_faixa_etaria);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.atendimento_id, other.atendimento_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_SGCM_TURMA4_ETL = new byte[0];
    static byte[] commonByteArray_SGCM_TURMA4_ETL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long atendimento_id;

				public long getAtendimento_id () {
					return this.atendimento_id;
				}
				
			    public java.util.Date atendimento_data;

				public java.util.Date getAtendimento_data () {
					return this.atendimento_data;
				}
				
			    public String atendimento_hora;

				public String getAtendimento_hora () {
					return this.atendimento_hora;
				}
				
			    public String atendimento_status;

				public String getAtendimento_status () {
					return this.atendimento_status;
				}
				
			    public int atendimento_dia_da_semana;

				public int getAtendimento_dia_da_semana () {
					return this.atendimento_dia_da_semana;
				}
				
			    public int atendimento_semana_no_mes;

				public int getAtendimento_semana_no_mes () {
					return this.atendimento_semana_no_mes;
				}
				
			    public int atendimento_mes;

				public int getAtendimento_mes () {
					return this.atendimento_mes;
				}
				
			    public String profissional_nome;

				public String getProfissional_nome () {
					return this.profissional_nome;
				}
				
			    public String especialidade_nome;

				public String getEspecialidade_nome () {
					return this.especialidade_nome;
				}
				
			    public String unidade_nome;

				public String getUnidade_nome () {
					return this.unidade_nome;
				}
				
			    public String convenio_nome;

				public String getConvenio_nome () {
					return this.convenio_nome;
				}
				
			    public String paciente_nome;

				public String getPaciente_nome () {
					return this.paciente_nome;
				}
				
			    public String paciente_sexo;

				public String getPaciente_sexo () {
					return this.paciente_sexo;
				}
				
			    public String paciente_grupo_sanguineo;

				public String getPaciente_grupo_sanguineo () {
					return this.paciente_grupo_sanguineo;
				}
				
			    public java.util.Date paciente_data_nascimento;

				public java.util.Date getPaciente_data_nascimento () {
					return this.paciente_data_nascimento;
				}
				
			    public boolean paciente_ausente;

				public boolean getPaciente_ausente () {
					return this.paciente_ausente;
				}
				
			    public long paciente_idade;

				public long getPaciente_idade () {
					return this.paciente_idade;
				}
				
			    public String paciente_faixa_etaria;

				public String getPaciente_faixa_etaria () {
					return this.paciente_faixa_etaria;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.atendimento_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.atendimento_id != other.atendimento_id)
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.atendimento_id = this.atendimento_id;
	            other.atendimento_data = this.atendimento_data;
	            other.atendimento_hora = this.atendimento_hora;
	            other.atendimento_status = this.atendimento_status;
	            other.atendimento_dia_da_semana = this.atendimento_dia_da_semana;
	            other.atendimento_semana_no_mes = this.atendimento_semana_no_mes;
	            other.atendimento_mes = this.atendimento_mes;
	            other.profissional_nome = this.profissional_nome;
	            other.especialidade_nome = this.especialidade_nome;
	            other.unidade_nome = this.unidade_nome;
	            other.convenio_nome = this.convenio_nome;
	            other.paciente_nome = this.paciente_nome;
	            other.paciente_sexo = this.paciente_sexo;
	            other.paciente_grupo_sanguineo = this.paciente_grupo_sanguineo;
	            other.paciente_data_nascimento = this.paciente_data_nascimento;
	            other.paciente_ausente = this.paciente_ausente;
	            other.paciente_idade = this.paciente_idade;
	            other.paciente_faixa_etaria = this.paciente_faixa_etaria;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.atendimento_id = this.atendimento_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SGCM_TURMA4_ETL.length) {
				if(length < 1024 && commonByteArray_SGCM_TURMA4_ETL.length == 0) {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[1024];
				} else {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SGCM_TURMA4_ETL, 0, length);
			strReturn = new String(commonByteArray_SGCM_TURMA4_ETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SGCM_TURMA4_ETL.length) {
				if(length < 1024 && commonByteArray_SGCM_TURMA4_ETL.length == 0) {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[1024];
				} else {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SGCM_TURMA4_ETL, 0, length);
			strReturn = new String(commonByteArray_SGCM_TURMA4_ETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.atendimento_id = dis.readLong();
					
					this.atendimento_data = readDate(dis);
					
					this.atendimento_hora = readString(dis);
					
					this.atendimento_status = readString(dis);
					
			        this.atendimento_dia_da_semana = dis.readInt();
					
			        this.atendimento_semana_no_mes = dis.readInt();
					
			        this.atendimento_mes = dis.readInt();
					
					this.profissional_nome = readString(dis);
					
					this.especialidade_nome = readString(dis);
					
					this.unidade_nome = readString(dis);
					
					this.convenio_nome = readString(dis);
					
					this.paciente_nome = readString(dis);
					
					this.paciente_sexo = readString(dis);
					
					this.paciente_grupo_sanguineo = readString(dis);
					
					this.paciente_data_nascimento = readDate(dis);
					
			        this.paciente_ausente = dis.readBoolean();
					
			        this.paciente_idade = dis.readLong();
					
					this.paciente_faixa_etaria = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.atendimento_id = dis.readLong();
					
					this.atendimento_data = readDate(dis);
					
					this.atendimento_hora = readString(dis);
					
					this.atendimento_status = readString(dis);
					
			        this.atendimento_dia_da_semana = dis.readInt();
					
			        this.atendimento_semana_no_mes = dis.readInt();
					
			        this.atendimento_mes = dis.readInt();
					
					this.profissional_nome = readString(dis);
					
					this.especialidade_nome = readString(dis);
					
					this.unidade_nome = readString(dis);
					
					this.convenio_nome = readString(dis);
					
					this.paciente_nome = readString(dis);
					
					this.paciente_sexo = readString(dis);
					
					this.paciente_grupo_sanguineo = readString(dis);
					
					this.paciente_data_nascimento = readDate(dis);
					
			        this.paciente_ausente = dis.readBoolean();
					
			        this.paciente_idade = dis.readLong();
					
					this.paciente_faixa_etaria = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.atendimento_id);
					
					// java.util.Date
				
						writeDate(this.atendimento_data,dos);
					
					// String
				
						writeString(this.atendimento_hora,dos);
					
					// String
				
						writeString(this.atendimento_status,dos);
					
					// int
				
		            	dos.writeInt(this.atendimento_dia_da_semana);
					
					// int
				
		            	dos.writeInt(this.atendimento_semana_no_mes);
					
					// int
				
		            	dos.writeInt(this.atendimento_mes);
					
					// String
				
						writeString(this.profissional_nome,dos);
					
					// String
				
						writeString(this.especialidade_nome,dos);
					
					// String
				
						writeString(this.unidade_nome,dos);
					
					// String
				
						writeString(this.convenio_nome,dos);
					
					// String
				
						writeString(this.paciente_nome,dos);
					
					// String
				
						writeString(this.paciente_sexo,dos);
					
					// String
				
						writeString(this.paciente_grupo_sanguineo,dos);
					
					// java.util.Date
				
						writeDate(this.paciente_data_nascimento,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.paciente_ausente);
					
					// long
				
		            	dos.writeLong(this.paciente_idade);
					
					// String
				
						writeString(this.paciente_faixa_etaria,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.atendimento_id);
					
					// java.util.Date
				
						writeDate(this.atendimento_data,dos);
					
					// String
				
						writeString(this.atendimento_hora,dos);
					
					// String
				
						writeString(this.atendimento_status,dos);
					
					// int
				
		            	dos.writeInt(this.atendimento_dia_da_semana);
					
					// int
				
		            	dos.writeInt(this.atendimento_semana_no_mes);
					
					// int
				
		            	dos.writeInt(this.atendimento_mes);
					
					// String
				
						writeString(this.profissional_nome,dos);
					
					// String
				
						writeString(this.especialidade_nome,dos);
					
					// String
				
						writeString(this.unidade_nome,dos);
					
					// String
				
						writeString(this.convenio_nome,dos);
					
					// String
				
						writeString(this.paciente_nome,dos);
					
					// String
				
						writeString(this.paciente_sexo,dos);
					
					// String
				
						writeString(this.paciente_grupo_sanguineo,dos);
					
					// java.util.Date
				
						writeDate(this.paciente_data_nascimento,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.paciente_ausente);
					
					// long
				
		            	dos.writeLong(this.paciente_idade);
					
					// String
				
						writeString(this.paciente_faixa_etaria,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("atendimento_id="+String.valueOf(atendimento_id));
		sb.append(",atendimento_data="+String.valueOf(atendimento_data));
		sb.append(",atendimento_hora="+atendimento_hora);
		sb.append(",atendimento_status="+atendimento_status);
		sb.append(",atendimento_dia_da_semana="+String.valueOf(atendimento_dia_da_semana));
		sb.append(",atendimento_semana_no_mes="+String.valueOf(atendimento_semana_no_mes));
		sb.append(",atendimento_mes="+String.valueOf(atendimento_mes));
		sb.append(",profissional_nome="+profissional_nome);
		sb.append(",especialidade_nome="+especialidade_nome);
		sb.append(",unidade_nome="+unidade_nome);
		sb.append(",convenio_nome="+convenio_nome);
		sb.append(",paciente_nome="+paciente_nome);
		sb.append(",paciente_sexo="+paciente_sexo);
		sb.append(",paciente_grupo_sanguineo="+paciente_grupo_sanguineo);
		sb.append(",paciente_data_nascimento="+String.valueOf(paciente_data_nascimento));
		sb.append(",paciente_ausente="+String.valueOf(paciente_ausente));
		sb.append(",paciente_idade="+String.valueOf(paciente_idade));
		sb.append(",paciente_faixa_etaria="+paciente_faixa_etaria);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.atendimento_id, other.atendimento_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_SGCM_TURMA4_ETL = new byte[0];
    static byte[] commonByteArray_SGCM_TURMA4_ETL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long atendimento_id;

				public long getAtendimento_id () {
					return this.atendimento_id;
				}
				
			    public java.util.Date atendimento_data;

				public java.util.Date getAtendimento_data () {
					return this.atendimento_data;
				}
				
			    public String atendimento_hora;

				public String getAtendimento_hora () {
					return this.atendimento_hora;
				}
				
			    public String atendimento_status;

				public String getAtendimento_status () {
					return this.atendimento_status;
				}
				
			    public int atendimento_dia_da_semana;

				public int getAtendimento_dia_da_semana () {
					return this.atendimento_dia_da_semana;
				}
				
			    public int atendimento_semana_no_mes;

				public int getAtendimento_semana_no_mes () {
					return this.atendimento_semana_no_mes;
				}
				
			    public int atendimento_mes;

				public int getAtendimento_mes () {
					return this.atendimento_mes;
				}
				
			    public String profissional_nome;

				public String getProfissional_nome () {
					return this.profissional_nome;
				}
				
			    public String especialidade_nome;

				public String getEspecialidade_nome () {
					return this.especialidade_nome;
				}
				
			    public String unidade_nome;

				public String getUnidade_nome () {
					return this.unidade_nome;
				}
				
			    public String convenio_nome;

				public String getConvenio_nome () {
					return this.convenio_nome;
				}
				
			    public String paciente_nome;

				public String getPaciente_nome () {
					return this.paciente_nome;
				}
				
			    public String paciente_sexo;

				public String getPaciente_sexo () {
					return this.paciente_sexo;
				}
				
			    public String paciente_grupo_sanguineo;

				public String getPaciente_grupo_sanguineo () {
					return this.paciente_grupo_sanguineo;
				}
				
			    public java.util.Date paciente_data_nascimento;

				public java.util.Date getPaciente_data_nascimento () {
					return this.paciente_data_nascimento;
				}
				
			    public boolean paciente_ausente;

				public boolean getPaciente_ausente () {
					return this.paciente_ausente;
				}
				
			    public long paciente_idade;

				public long getPaciente_idade () {
					return this.paciente_idade;
				}
				
			    public String paciente_faixa_etaria;

				public String getPaciente_faixa_etaria () {
					return this.paciente_faixa_etaria;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.atendimento_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.atendimento_id != other.atendimento_id)
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.atendimento_id = this.atendimento_id;
	            other.atendimento_data = this.atendimento_data;
	            other.atendimento_hora = this.atendimento_hora;
	            other.atendimento_status = this.atendimento_status;
	            other.atendimento_dia_da_semana = this.atendimento_dia_da_semana;
	            other.atendimento_semana_no_mes = this.atendimento_semana_no_mes;
	            other.atendimento_mes = this.atendimento_mes;
	            other.profissional_nome = this.profissional_nome;
	            other.especialidade_nome = this.especialidade_nome;
	            other.unidade_nome = this.unidade_nome;
	            other.convenio_nome = this.convenio_nome;
	            other.paciente_nome = this.paciente_nome;
	            other.paciente_sexo = this.paciente_sexo;
	            other.paciente_grupo_sanguineo = this.paciente_grupo_sanguineo;
	            other.paciente_data_nascimento = this.paciente_data_nascimento;
	            other.paciente_ausente = this.paciente_ausente;
	            other.paciente_idade = this.paciente_idade;
	            other.paciente_faixa_etaria = this.paciente_faixa_etaria;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.atendimento_id = this.atendimento_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SGCM_TURMA4_ETL.length) {
				if(length < 1024 && commonByteArray_SGCM_TURMA4_ETL.length == 0) {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[1024];
				} else {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SGCM_TURMA4_ETL, 0, length);
			strReturn = new String(commonByteArray_SGCM_TURMA4_ETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SGCM_TURMA4_ETL.length) {
				if(length < 1024 && commonByteArray_SGCM_TURMA4_ETL.length == 0) {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[1024];
				} else {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SGCM_TURMA4_ETL, 0, length);
			strReturn = new String(commonByteArray_SGCM_TURMA4_ETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.atendimento_id = dis.readLong();
					
					this.atendimento_data = readDate(dis);
					
					this.atendimento_hora = readString(dis);
					
					this.atendimento_status = readString(dis);
					
			        this.atendimento_dia_da_semana = dis.readInt();
					
			        this.atendimento_semana_no_mes = dis.readInt();
					
			        this.atendimento_mes = dis.readInt();
					
					this.profissional_nome = readString(dis);
					
					this.especialidade_nome = readString(dis);
					
					this.unidade_nome = readString(dis);
					
					this.convenio_nome = readString(dis);
					
					this.paciente_nome = readString(dis);
					
					this.paciente_sexo = readString(dis);
					
					this.paciente_grupo_sanguineo = readString(dis);
					
					this.paciente_data_nascimento = readDate(dis);
					
			        this.paciente_ausente = dis.readBoolean();
					
			        this.paciente_idade = dis.readLong();
					
					this.paciente_faixa_etaria = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.atendimento_id = dis.readLong();
					
					this.atendimento_data = readDate(dis);
					
					this.atendimento_hora = readString(dis);
					
					this.atendimento_status = readString(dis);
					
			        this.atendimento_dia_da_semana = dis.readInt();
					
			        this.atendimento_semana_no_mes = dis.readInt();
					
			        this.atendimento_mes = dis.readInt();
					
					this.profissional_nome = readString(dis);
					
					this.especialidade_nome = readString(dis);
					
					this.unidade_nome = readString(dis);
					
					this.convenio_nome = readString(dis);
					
					this.paciente_nome = readString(dis);
					
					this.paciente_sexo = readString(dis);
					
					this.paciente_grupo_sanguineo = readString(dis);
					
					this.paciente_data_nascimento = readDate(dis);
					
			        this.paciente_ausente = dis.readBoolean();
					
			        this.paciente_idade = dis.readLong();
					
					this.paciente_faixa_etaria = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.atendimento_id);
					
					// java.util.Date
				
						writeDate(this.atendimento_data,dos);
					
					// String
				
						writeString(this.atendimento_hora,dos);
					
					// String
				
						writeString(this.atendimento_status,dos);
					
					// int
				
		            	dos.writeInt(this.atendimento_dia_da_semana);
					
					// int
				
		            	dos.writeInt(this.atendimento_semana_no_mes);
					
					// int
				
		            	dos.writeInt(this.atendimento_mes);
					
					// String
				
						writeString(this.profissional_nome,dos);
					
					// String
				
						writeString(this.especialidade_nome,dos);
					
					// String
				
						writeString(this.unidade_nome,dos);
					
					// String
				
						writeString(this.convenio_nome,dos);
					
					// String
				
						writeString(this.paciente_nome,dos);
					
					// String
				
						writeString(this.paciente_sexo,dos);
					
					// String
				
						writeString(this.paciente_grupo_sanguineo,dos);
					
					// java.util.Date
				
						writeDate(this.paciente_data_nascimento,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.paciente_ausente);
					
					// long
				
		            	dos.writeLong(this.paciente_idade);
					
					// String
				
						writeString(this.paciente_faixa_etaria,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.atendimento_id);
					
					// java.util.Date
				
						writeDate(this.atendimento_data,dos);
					
					// String
				
						writeString(this.atendimento_hora,dos);
					
					// String
				
						writeString(this.atendimento_status,dos);
					
					// int
				
		            	dos.writeInt(this.atendimento_dia_da_semana);
					
					// int
				
		            	dos.writeInt(this.atendimento_semana_no_mes);
					
					// int
				
		            	dos.writeInt(this.atendimento_mes);
					
					// String
				
						writeString(this.profissional_nome,dos);
					
					// String
				
						writeString(this.especialidade_nome,dos);
					
					// String
				
						writeString(this.unidade_nome,dos);
					
					// String
				
						writeString(this.convenio_nome,dos);
					
					// String
				
						writeString(this.paciente_nome,dos);
					
					// String
				
						writeString(this.paciente_sexo,dos);
					
					// String
				
						writeString(this.paciente_grupo_sanguineo,dos);
					
					// java.util.Date
				
						writeDate(this.paciente_data_nascimento,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.paciente_ausente);
					
					// long
				
		            	dos.writeLong(this.paciente_idade);
					
					// String
				
						writeString(this.paciente_faixa_etaria,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("atendimento_id="+String.valueOf(atendimento_id));
		sb.append(",atendimento_data="+String.valueOf(atendimento_data));
		sb.append(",atendimento_hora="+atendimento_hora);
		sb.append(",atendimento_status="+atendimento_status);
		sb.append(",atendimento_dia_da_semana="+String.valueOf(atendimento_dia_da_semana));
		sb.append(",atendimento_semana_no_mes="+String.valueOf(atendimento_semana_no_mes));
		sb.append(",atendimento_mes="+String.valueOf(atendimento_mes));
		sb.append(",profissional_nome="+profissional_nome);
		sb.append(",especialidade_nome="+especialidade_nome);
		sb.append(",unidade_nome="+unidade_nome);
		sb.append(",convenio_nome="+convenio_nome);
		sb.append(",paciente_nome="+paciente_nome);
		sb.append(",paciente_sexo="+paciente_sexo);
		sb.append(",paciente_grupo_sanguineo="+paciente_grupo_sanguineo);
		sb.append(",paciente_data_nascimento="+String.valueOf(paciente_data_nascimento));
		sb.append(",paciente_ausente="+String.valueOf(paciente_ausente));
		sb.append(",paciente_idade="+String.valueOf(paciente_idade));
		sb.append(",paciente_faixa_etaria="+paciente_faixa_etaria);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.atendimento_id, other.atendimento_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_SGCM_TURMA4_ETL = new byte[0];
    static byte[] commonByteArray_SGCM_TURMA4_ETL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long atendimento_id;

				public long getAtendimento_id () {
					return this.atendimento_id;
				}
				
			    public java.util.Date atendimento_data;

				public java.util.Date getAtendimento_data () {
					return this.atendimento_data;
				}
				
			    public String atendimento_hora;

				public String getAtendimento_hora () {
					return this.atendimento_hora;
				}
				
			    public String atendimento_status;

				public String getAtendimento_status () {
					return this.atendimento_status;
				}
				
			    public int atendimento_dia_da_semana;

				public int getAtendimento_dia_da_semana () {
					return this.atendimento_dia_da_semana;
				}
				
			    public int atendimento_semana_no_mes;

				public int getAtendimento_semana_no_mes () {
					return this.atendimento_semana_no_mes;
				}
				
			    public int atendimento_mes;

				public int getAtendimento_mes () {
					return this.atendimento_mes;
				}
				
			    public String profissional_nome;

				public String getProfissional_nome () {
					return this.profissional_nome;
				}
				
			    public String especialidade_nome;

				public String getEspecialidade_nome () {
					return this.especialidade_nome;
				}
				
			    public String unidade_nome;

				public String getUnidade_nome () {
					return this.unidade_nome;
				}
				
			    public String convenio_nome;

				public String getConvenio_nome () {
					return this.convenio_nome;
				}
				
			    public String paciente_nome;

				public String getPaciente_nome () {
					return this.paciente_nome;
				}
				
			    public String paciente_sexo;

				public String getPaciente_sexo () {
					return this.paciente_sexo;
				}
				
			    public String paciente_grupo_sanguineo;

				public String getPaciente_grupo_sanguineo () {
					return this.paciente_grupo_sanguineo;
				}
				
			    public java.util.Date paciente_data_nascimento;

				public java.util.Date getPaciente_data_nascimento () {
					return this.paciente_data_nascimento;
				}
				
			    public boolean paciente_ausente;

				public boolean getPaciente_ausente () {
					return this.paciente_ausente;
				}
				
			    public long paciente_idade;

				public long getPaciente_idade () {
					return this.paciente_idade;
				}
				
			    public String paciente_faixa_etaria;

				public String getPaciente_faixa_etaria () {
					return this.paciente_faixa_etaria;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.atendimento_id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out1Struct other = (out1Struct) obj;
		
						if (this.atendimento_id != other.atendimento_id)
							return false;
					

		return true;
    }

	public void copyDataTo(out1Struct other) {

		other.atendimento_id = this.atendimento_id;
	            other.atendimento_data = this.atendimento_data;
	            other.atendimento_hora = this.atendimento_hora;
	            other.atendimento_status = this.atendimento_status;
	            other.atendimento_dia_da_semana = this.atendimento_dia_da_semana;
	            other.atendimento_semana_no_mes = this.atendimento_semana_no_mes;
	            other.atendimento_mes = this.atendimento_mes;
	            other.profissional_nome = this.profissional_nome;
	            other.especialidade_nome = this.especialidade_nome;
	            other.unidade_nome = this.unidade_nome;
	            other.convenio_nome = this.convenio_nome;
	            other.paciente_nome = this.paciente_nome;
	            other.paciente_sexo = this.paciente_sexo;
	            other.paciente_grupo_sanguineo = this.paciente_grupo_sanguineo;
	            other.paciente_data_nascimento = this.paciente_data_nascimento;
	            other.paciente_ausente = this.paciente_ausente;
	            other.paciente_idade = this.paciente_idade;
	            other.paciente_faixa_etaria = this.paciente_faixa_etaria;
	            
	}

	public void copyKeysDataTo(out1Struct other) {

		other.atendimento_id = this.atendimento_id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SGCM_TURMA4_ETL.length) {
				if(length < 1024 && commonByteArray_SGCM_TURMA4_ETL.length == 0) {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[1024];
				} else {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SGCM_TURMA4_ETL, 0, length);
			strReturn = new String(commonByteArray_SGCM_TURMA4_ETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SGCM_TURMA4_ETL.length) {
				if(length < 1024 && commonByteArray_SGCM_TURMA4_ETL.length == 0) {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[1024];
				} else {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SGCM_TURMA4_ETL, 0, length);
			strReturn = new String(commonByteArray_SGCM_TURMA4_ETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.atendimento_id = dis.readLong();
					
					this.atendimento_data = readDate(dis);
					
					this.atendimento_hora = readString(dis);
					
					this.atendimento_status = readString(dis);
					
			        this.atendimento_dia_da_semana = dis.readInt();
					
			        this.atendimento_semana_no_mes = dis.readInt();
					
			        this.atendimento_mes = dis.readInt();
					
					this.profissional_nome = readString(dis);
					
					this.especialidade_nome = readString(dis);
					
					this.unidade_nome = readString(dis);
					
					this.convenio_nome = readString(dis);
					
					this.paciente_nome = readString(dis);
					
					this.paciente_sexo = readString(dis);
					
					this.paciente_grupo_sanguineo = readString(dis);
					
					this.paciente_data_nascimento = readDate(dis);
					
			        this.paciente_ausente = dis.readBoolean();
					
			        this.paciente_idade = dis.readLong();
					
					this.paciente_faixa_etaria = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.atendimento_id = dis.readLong();
					
					this.atendimento_data = readDate(dis);
					
					this.atendimento_hora = readString(dis);
					
					this.atendimento_status = readString(dis);
					
			        this.atendimento_dia_da_semana = dis.readInt();
					
			        this.atendimento_semana_no_mes = dis.readInt();
					
			        this.atendimento_mes = dis.readInt();
					
					this.profissional_nome = readString(dis);
					
					this.especialidade_nome = readString(dis);
					
					this.unidade_nome = readString(dis);
					
					this.convenio_nome = readString(dis);
					
					this.paciente_nome = readString(dis);
					
					this.paciente_sexo = readString(dis);
					
					this.paciente_grupo_sanguineo = readString(dis);
					
					this.paciente_data_nascimento = readDate(dis);
					
			        this.paciente_ausente = dis.readBoolean();
					
			        this.paciente_idade = dis.readLong();
					
					this.paciente_faixa_etaria = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.atendimento_id);
					
					// java.util.Date
				
						writeDate(this.atendimento_data,dos);
					
					// String
				
						writeString(this.atendimento_hora,dos);
					
					// String
				
						writeString(this.atendimento_status,dos);
					
					// int
				
		            	dos.writeInt(this.atendimento_dia_da_semana);
					
					// int
				
		            	dos.writeInt(this.atendimento_semana_no_mes);
					
					// int
				
		            	dos.writeInt(this.atendimento_mes);
					
					// String
				
						writeString(this.profissional_nome,dos);
					
					// String
				
						writeString(this.especialidade_nome,dos);
					
					// String
				
						writeString(this.unidade_nome,dos);
					
					// String
				
						writeString(this.convenio_nome,dos);
					
					// String
				
						writeString(this.paciente_nome,dos);
					
					// String
				
						writeString(this.paciente_sexo,dos);
					
					// String
				
						writeString(this.paciente_grupo_sanguineo,dos);
					
					// java.util.Date
				
						writeDate(this.paciente_data_nascimento,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.paciente_ausente);
					
					// long
				
		            	dos.writeLong(this.paciente_idade);
					
					// String
				
						writeString(this.paciente_faixa_etaria,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.atendimento_id);
					
					// java.util.Date
				
						writeDate(this.atendimento_data,dos);
					
					// String
				
						writeString(this.atendimento_hora,dos);
					
					// String
				
						writeString(this.atendimento_status,dos);
					
					// int
				
		            	dos.writeInt(this.atendimento_dia_da_semana);
					
					// int
				
		            	dos.writeInt(this.atendimento_semana_no_mes);
					
					// int
				
		            	dos.writeInt(this.atendimento_mes);
					
					// String
				
						writeString(this.profissional_nome,dos);
					
					// String
				
						writeString(this.especialidade_nome,dos);
					
					// String
				
						writeString(this.unidade_nome,dos);
					
					// String
				
						writeString(this.convenio_nome,dos);
					
					// String
				
						writeString(this.paciente_nome,dos);
					
					// String
				
						writeString(this.paciente_sexo,dos);
					
					// String
				
						writeString(this.paciente_grupo_sanguineo,dos);
					
					// java.util.Date
				
						writeDate(this.paciente_data_nascimento,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.paciente_ausente);
					
					// long
				
		            	dos.writeLong(this.paciente_idade);
					
					// String
				
						writeString(this.paciente_faixa_etaria,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("atendimento_id="+String.valueOf(atendimento_id));
		sb.append(",atendimento_data="+String.valueOf(atendimento_data));
		sb.append(",atendimento_hora="+atendimento_hora);
		sb.append(",atendimento_status="+atendimento_status);
		sb.append(",atendimento_dia_da_semana="+String.valueOf(atendimento_dia_da_semana));
		sb.append(",atendimento_semana_no_mes="+String.valueOf(atendimento_semana_no_mes));
		sb.append(",atendimento_mes="+String.valueOf(atendimento_mes));
		sb.append(",profissional_nome="+profissional_nome);
		sb.append(",especialidade_nome="+especialidade_nome);
		sb.append(",unidade_nome="+unidade_nome);
		sb.append(",convenio_nome="+convenio_nome);
		sb.append(",paciente_nome="+paciente_nome);
		sb.append(",paciente_sexo="+paciente_sexo);
		sb.append(",paciente_grupo_sanguineo="+paciente_grupo_sanguineo);
		sb.append(",paciente_data_nascimento="+String.valueOf(paciente_data_nascimento));
		sb.append(",paciente_ausente="+String.valueOf(paciente_ausente));
		sb.append(",paciente_idade="+String.valueOf(paciente_idade));
		sb.append(",paciente_faixa_etaria="+paciente_faixa_etaria);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.atendimento_id, other.atendimento_id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class atendimentoStruct implements routines.system.IPersistableRow<atendimentoStruct> {
    final static byte[] commonByteArrayLock_SGCM_TURMA4_ETL = new byte[0];
    static byte[] commonByteArray_SGCM_TURMA4_ETL = new byte[0];

	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public java.util.Date data;

				public java.util.Date getData () {
					return this.data;
				}
				
			    public String hora;

				public String getHora () {
					return this.hora;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public Long convenio_id;

				public Long getConvenio_id () {
					return this.convenio_id;
				}
				
			    public long paciente_id;

				public long getPaciente_id () {
					return this.paciente_id;
				}
				
			    public long profissional_id;

				public long getProfissional_id () {
					return this.profissional_id;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SGCM_TURMA4_ETL.length) {
				if(length < 1024 && commonByteArray_SGCM_TURMA4_ETL.length == 0) {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[1024];
				} else {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SGCM_TURMA4_ETL, 0, length);
			strReturn = new String(commonByteArray_SGCM_TURMA4_ETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SGCM_TURMA4_ETL.length) {
				if(length < 1024 && commonByteArray_SGCM_TURMA4_ETL.length == 0) {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[1024];
				} else {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SGCM_TURMA4_ETL, 0, length);
			strReturn = new String(commonByteArray_SGCM_TURMA4_ETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.data = readDate(dis);
					
					this.hora = readString(dis);
					
					this.status = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.convenio_id = null;
           				} else {
           			    	this.convenio_id = dis.readLong();
           				}
					
			        this.paciente_id = dis.readLong();
					
			        this.profissional_id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.data = readDate(dis);
					
					this.hora = readString(dis);
					
					this.status = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.convenio_id = null;
           				} else {
           			    	this.convenio_id = dis.readLong();
           				}
					
			        this.paciente_id = dis.readLong();
					
			        this.profissional_id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// java.util.Date
				
						writeDate(this.data,dos);
					
					// String
				
						writeString(this.hora,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// Long
				
						if(this.convenio_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.convenio_id);
		            	}
					
					// long
				
		            	dos.writeLong(this.paciente_id);
					
					// long
				
		            	dos.writeLong(this.profissional_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// java.util.Date
				
						writeDate(this.data,dos);
					
					// String
				
						writeString(this.hora,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// Long
				
						if(this.convenio_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.convenio_id);
		            	}
					
					// long
				
		            	dos.writeLong(this.paciente_id);
					
					// long
				
		            	dos.writeLong(this.profissional_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",data="+String.valueOf(data));
		sb.append(",hora="+hora);
		sb.append(",status="+status);
		sb.append(",convenio_id="+String.valueOf(convenio_id));
		sb.append(",paciente_id="+String.valueOf(paciente_id));
		sb.append(",profissional_id="+String.valueOf(profissional_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(atendimentoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_SGCM_TURMA4_ETL = new byte[0];
    static byte[] commonByteArray_SGCM_TURMA4_ETL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public java.util.Date data;

				public java.util.Date getData () {
					return this.data;
				}
				
			    public String hora;

				public String getHora () {
					return this.hora;
				}
				
			    public String status;

				public String getStatus () {
					return this.status;
				}
				
			    public Long convenio_id;

				public Long getConvenio_id () {
					return this.convenio_id;
				}
				
			    public long paciente_id;

				public long getPaciente_id () {
					return this.paciente_id;
				}
				
			    public long profissional_id;

				public long getProfissional_id () {
					return this.profissional_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tDBInput_1Struct other) {

		other.id = this.id;
	            other.data = this.data;
	            other.hora = this.hora;
	            other.status = this.status;
	            other.convenio_id = this.convenio_id;
	            other.paciente_id = this.paciente_id;
	            other.profissional_id = this.profissional_id;
	            
	}

	public void copyKeysDataTo(after_tDBInput_1Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SGCM_TURMA4_ETL.length) {
				if(length < 1024 && commonByteArray_SGCM_TURMA4_ETL.length == 0) {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[1024];
				} else {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_SGCM_TURMA4_ETL, 0, length);
			strReturn = new String(commonByteArray_SGCM_TURMA4_ETL, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_SGCM_TURMA4_ETL.length) {
				if(length < 1024 && commonByteArray_SGCM_TURMA4_ETL.length == 0) {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[1024];
				} else {
   					commonByteArray_SGCM_TURMA4_ETL = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_SGCM_TURMA4_ETL, 0, length);
			strReturn = new String(commonByteArray_SGCM_TURMA4_ETL, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.data = readDate(dis);
					
					this.hora = readString(dis);
					
					this.status = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.convenio_id = null;
           				} else {
           			    	this.convenio_id = dis.readLong();
           				}
					
			        this.paciente_id = dis.readLong();
					
			        this.profissional_id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.data = readDate(dis);
					
					this.hora = readString(dis);
					
					this.status = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.convenio_id = null;
           				} else {
           			    	this.convenio_id = dis.readLong();
           				}
					
			        this.paciente_id = dis.readLong();
					
			        this.profissional_id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// java.util.Date
				
						writeDate(this.data,dos);
					
					// String
				
						writeString(this.hora,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// Long
				
						if(this.convenio_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.convenio_id);
		            	}
					
					// long
				
		            	dos.writeLong(this.paciente_id);
					
					// long
				
		            	dos.writeLong(this.profissional_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// java.util.Date
				
						writeDate(this.data,dos);
					
					// String
				
						writeString(this.hora,dos);
					
					// String
				
						writeString(this.status,dos);
					
					// Long
				
						if(this.convenio_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.convenio_id);
		            	}
					
					// long
				
		            	dos.writeLong(this.paciente_id);
					
					// long
				
		            	dos.writeLong(this.profissional_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",data="+String.valueOf(data));
		sb.append(",hora="+hora);
		sb.append(",status="+status);
		sb.append(",convenio_id="+String.valueOf(convenio_id));
		sb.append(",paciente_id="+String.valueOf(paciente_id));
		sb.append(",profissional_id="+String.valueOf(profissional_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);
		tDBInput_4Process(globalMap);
		tDBInput_5Process(globalMap);
		tDBInput_3Process(globalMap);
		tDBInput_6Process(globalMap);

		atendimentoStruct atendimento = new atendimentoStruct();
out1Struct out1 = new out1Struct();
row1Struct row1 = new row1Struct();
row2Struct row2 = new row2Struct();
row3Struct row3 = new row3Struct();






	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tDBOutput_1 = 0;
		






int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;

String tableName_tDBOutput_1 = "atendimento_olap";
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
long date_tDBOutput_1;

java.sql.Connection conn_tDBOutput_1 = null;
		
        String properties_tDBOutput_1 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1&serverTimezone=America/Bogota";
        if (properties_tDBOutput_1 == null || properties_tDBOutput_1.trim().length() == 0) {
            properties_tDBOutput_1 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
        }else {
            if (!properties_tDBOutput_1.contains("rewriteBatchedStatements=")) {
                properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
            }

            if (!properties_tDBOutput_1.contains("allowLoadLocalInfile=")) {
                properties_tDBOutput_1 += "&allowLoadLocalInfile=true";
            }
        }

        String url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "sgcm" + "?" + properties_tDBOutput_1;
		
		String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";
		
		String dbUser_tDBOutput_1 = "root";
		

		 
	final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:DRq6R3ZBNlhno3ONJGP2L1OM0v8HAGVE53owYfZLEjg=");

		String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
		java.lang.Class.forName(driverClass_tDBOutput_1);
		
		conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);
		
	
	resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;

int count_tDBOutput_1=0;
    	
                                java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
                                    java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables("sgcm", null, null, new String[]{"TABLE"});
                                boolean whetherExist_tDBOutput_1 = false;
                                while(rsTable_tDBOutput_1.next()) {
                                    String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
                                    if(table_tDBOutput_1.equalsIgnoreCase("atendimento_olap")) {
                                        whetherExist_tDBOutput_1 = true;
                                        break;
                                    }
                                }
                                if(whetherExist_tDBOutput_1) {
                                    try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                        stmtDrop_tDBOutput_1.execute("DROP TABLE `" + tableName_tDBOutput_1 + "`" );
                                    }
                                }
                                try(java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
                                    stmtCreate_tDBOutput_1.execute("CREATE TABLE `" + tableName_tDBOutput_1 + "`(`atendimento_id` BIGINT(19)   not null ,`atendimento_data` DATE  not null ,`atendimento_hora` TIME  not null ,`atendimento_status` VARCHAR(255)   not null ,`atendimento_dia_da_semana` INT(0)   not null ,`atendimento_semana_no_mes` INT(0)   not null ,`atendimento_mes` INT(0)   not null ,`profissional_nome` VARCHAR(255)   not null ,`especialidade_nome` VARCHAR(255)   not null ,`unidade_nome` VARCHAR(255)   not null ,`convenio_nome` VARCHAR(255)   not null ,`paciente_nome` VARCHAR(255)   not null ,`paciente_sexo` VARCHAR(255)   not null ,`paciente_grupo_sanguineo` VARCHAR(255)  ,`paciente_data_nascimento` DATE  not null ,`paciente_ausente` BIT(1)   not null ,`paciente_idade` BIGINT(0)   not null ,`paciente_faixa_etaria` VARCHAR(20)   not null ,primary key(`atendimento_id`))");
                                }

		        String insert_tDBOutput_1 = "INSERT INTO `" + "atendimento_olap" + "` (`atendimento_id`,`atendimento_data`,`atendimento_hora`,`atendimento_status`,`atendimento_dia_da_semana`,`atendimento_semana_no_mes`,`atendimento_mes`,`profissional_nome`,`especialidade_nome`,`unidade_nome`,`convenio_nome`,`paciente_nome`,`paciente_sexo`,`paciente_grupo_sanguineo`,`paciente_data_nascimento`,`paciente_ausente`,`paciente_idade`,`paciente_faixa_etaria`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				    

                        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
                        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);



 



/**
 * [tDBOutput_1 begin ] stop
 */




	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Users/WebAcademy/Desktop/topicos-emergentes-t4/etl/atendimento_olap.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
                String[] headColutFileOutputDelimited_1=new String[18];
            class CSVBasicSet_tFileOutputDelimited_1{
                private char field_Delim;
                private char row_Delim;
                private char escape;
                private char textEnclosure;
                private boolean useCRLFRecordDelimiter;

                public boolean isUseCRLFRecordDelimiter() {
                    return useCRLFRecordDelimiter;
                }

                public void setFieldSeparator(String fieldSep) throws IllegalArgumentException{
                    char field_Delim_tFileOutputDelimited_1[] = null;

                    //support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'.
                    if (fieldSep.length() > 0 ){
                        field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Field Separator must be assigned a char.");
                    }
                    this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
                }

                public char getFieldDelim(){
                    if(this.field_Delim==0){
                        setFieldSeparator(",");
                    }
                    return this.field_Delim;
                }

                public void setRowSeparator(String rowSep){
                    if("\r\n".equals(rowSep)) {
                        useCRLFRecordDelimiter = true;
                        return;
                    }
                    char row_DelimtFileOutputDelimited_1[] = null;

                    //support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'.
                    if (rowSep.length() > 0 ){
                        row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Row Separator must be assigned a char.");
                    }
                    this.row_Delim = row_DelimtFileOutputDelimited_1[0];
                }

                public char getRowDelim(){
                    if(this.row_Delim==0){
                        setRowSeparator("\n");
                    }
                    return this.row_Delim;
                }

                public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure) throws IllegalArgumentException{
                    if(strEscape.length() <= 0 ){
                        throw new IllegalArgumentException("Escape Char must be assigned a char.");
                    }

                    if ("".equals(strTextEnclosure)) strTextEnclosure = "\0";
                    char textEnclosure_tFileOutputDelimited_1[] = null;

                    if(strTextEnclosure.length() > 0 ){
                        textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
                    }else {
                        throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
                    }

                    this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

                    if(("\\").equals(strEscape)){
                        this.escape = '\\';
                    }else if(strEscape.equals(strTextEnclosure)){
                        this.escape = this.textEnclosure;
                    } else {
                        //the default escape mode is double escape
                        this.escape = this.textEnclosure;
                    }


                }

                public char getEscapeChar(){
                    return (char)this.escape;
                }

                public char getTextEnclosure(){
                    return this.textEnclosure;
                }
            }

            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 =0;
            int currentRow_tFileOutputDelimited_1 = 0;


            CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
            csvSettings_tFileOutputDelimited_1.setFieldSeparator(",");
            csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
            csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\"","\"");
                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }
                            com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

                            java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                            if(fileToDelete_tFileOutputDelimited_1.exists()) {
                                fileToDelete_tFileOutputDelimited_1.delete();
                            }
                            CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                            new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "UTF-8")));
                            CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
                    if(!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter() && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\r' && csvSettings_tFileOutputDelimited_1.getRowDelim()!='\n') {
                        CsvWritertFileOutputDelimited_1.setLineEnd(""+csvSettings_tFileOutputDelimited_1.getRowDelim());
                    }
                        if(filetFileOutputDelimited_1.length()==0){
                                    headColutFileOutputDelimited_1[0]="atendimento_id";
                                    headColutFileOutputDelimited_1[1]="atendimento_data";
                                    headColutFileOutputDelimited_1[2]="atendimento_hora";
                                    headColutFileOutputDelimited_1[3]="atendimento_status";
                                    headColutFileOutputDelimited_1[4]="atendimento_dia_da_semana";
                                    headColutFileOutputDelimited_1[5]="atendimento_semana_no_mes";
                                    headColutFileOutputDelimited_1[6]="atendimento_mes";
                                    headColutFileOutputDelimited_1[7]="profissional_nome";
                                    headColutFileOutputDelimited_1[8]="especialidade_nome";
                                    headColutFileOutputDelimited_1[9]="unidade_nome";
                                    headColutFileOutputDelimited_1[10]="convenio_nome";
                                    headColutFileOutputDelimited_1[11]="paciente_nome";
                                    headColutFileOutputDelimited_1[12]="paciente_sexo";
                                    headColutFileOutputDelimited_1[13]="paciente_grupo_sanguineo";
                                    headColutFileOutputDelimited_1[14]="paciente_data_nascimento";
                                    headColutFileOutputDelimited_1[15]="paciente_ausente";
                                    headColutFileOutputDelimited_1[16]="paciente_idade";
                                    headColutFileOutputDelimited_1[17]="paciente_faixa_etaria";
                            CsvWritertFileOutputDelimited_1.writeNext(headColutFileOutputDelimited_1);
                            CsvWritertFileOutputDelimited_1.flush();
                        }
                CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
                CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
                CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);



    resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tReplicate_1 = 0;
		

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"atendimento");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<convenioStruct> tHash_Lookup_convenio = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<convenioStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<convenioStruct>) 
					globalMap.get( "tHash_Lookup_convenio" ))
					;					
					
	

convenioStruct convenioHashKey = new convenioStruct();
convenioStruct convenioDefault = new convenioStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<pacienteStruct> tHash_Lookup_paciente = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<pacienteStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<pacienteStruct>) 
					globalMap.get( "tHash_Lookup_paciente" ))
					;					
					
	

pacienteStruct pacienteHashKey = new pacienteStruct();
pacienteStruct pacienteDefault = new pacienteStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<profissionalStruct> tHash_Lookup_profissional = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<profissionalStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<profissionalStruct>) 
					globalMap.get( "tHash_Lookup_profissional" ))
					;					
					
	

profissionalStruct profissionalHashKey = new profissionalStruct();
profissionalStruct profissionalDefault = new profissionalStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<especialidadeStruct> tHash_Lookup_especialidade = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<especialidadeStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<especialidadeStruct>) 
					globalMap.get( "tHash_Lookup_especialidade" ))
					;					
					
	

especialidadeStruct especialidadeHashKey = new especialidadeStruct();
especialidadeStruct especialidadeDefault = new especialidadeStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<unidadeStruct> tHash_Lookup_unidade = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<unidadeStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<unidadeStruct>) 
					globalMap.get( "tHash_Lookup_unidade" ))
					;					
					
	

unidadeStruct unidadeHashKey = new unidadeStruct();
unidadeStruct unidadeDefault = new unidadeStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String convenio_nome;
	boolean ausente;
	int dia_da_semana;
	int semana_no_mes;
	int mes;
	long idade;
	String faixa_etaria;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
		    calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "root";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:2/9+tHwNz2oNHI5BFlIOIJNkerMW04et+ZKE35ul1WU=");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
        String properties_tDBInput_1 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1&serverTimezone=America/Bogota";
        if (properties_tDBInput_1 == null || properties_tDBInput_1.trim().length() == 0) {
            properties_tDBInput_1 = "";
        }
        String url_tDBInput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "sgcm" + "?" + properties_tDBInput_1;
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT \n  `atendimento`.`id`, \n  `atendimento`.`data`, \n  `atendimento`.`hora`, \n  `atendimento`.`status`, \n  `atendime"
+"nto`.`convenio_id`, \n  `atendimento`.`paciente_id`, \n  `atendimento`.`profissional_id`\nFROM `atendimento`";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								atendimento.id = 0;
							} else {
		                          
            atendimento.id = rs_tDBInput_1.getLong(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								atendimento.data = null;
							} else {
										
				if(rs_tDBInput_1.getString(2) != null) {
					String dateString_tDBInput_1 = rs_tDBInput_1.getString(2);
					if (!("0000-00-00").equals(dateString_tDBInput_1) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
						atendimento.data = rs_tDBInput_1.getTimestamp(2);
					} else {
						atendimento.data = (java.util.Date) year0_tDBInput_1.clone();
					}
				} else {
					atendimento.data =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								atendimento.hora = null;
							} else {
	                         		
        	atendimento.hora = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								atendimento.status = null;
							} else {
	                         		
        	atendimento.status = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								atendimento.convenio_id = null;
							} else {
		                          
            atendimento.convenio_id = rs_tDBInput_1.getLong(5);
            if(rs_tDBInput_1.wasNull()){
                    atendimento.convenio_id = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								atendimento.paciente_id = 0;
							} else {
		                          
            atendimento.paciente_id = rs_tDBInput_1.getLong(6);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								atendimento.profissional_id = 0;
							} else {
		                          
            atendimento.profissional_id = rs_tDBInput_1.getLong(7);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					

 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"atendimento"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "convenio" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopconvenio = false;
       		  	    	
       		  	    	
 							convenioStruct convenioObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_convenio__id = atendimento.convenio_id;
	                        		    	if(exprKeyValue_convenio__id == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			convenioHashKey.id = (long)(Long) exprKeyValue_convenio__id;
                        		    		}
                        		    		

								
		                        	convenioHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_convenio.lookup( convenioHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_convenio != null && tHash_Lookup_convenio.getCount(convenioHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'convenio' and it contains more one result from keys :  convenio.id = '" + convenioHashKey.id + "'");
								} // G 071
							

							convenioStruct convenio = null;
                    		  	 
							   
                    		  	 
	       		  	    	convenioStruct fromLookup_convenio = null;
							convenio = convenioDefault;
										 
							
								 
							
							
								if (tHash_Lookup_convenio !=null && tHash_Lookup_convenio.hasNext()) { // G 099
								
							
								
								fromLookup_convenio = tHash_Lookup_convenio.next();

							
							
								} // G 099
							
							

							if(fromLookup_convenio != null) {
								convenio = fromLookup_convenio;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "paciente" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooppaciente = false;
       		  	    	
       		  	    	
 							pacienteStruct pacienteObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_paciente__id = atendimento.paciente_id;
	                        		    	if(exprKeyValue_paciente__id == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			pacienteHashKey.id = (long)(Long) exprKeyValue_paciente__id;
                        		    		}
                        		    		

								
		                        	pacienteHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_paciente.lookup( pacienteHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_paciente != null && tHash_Lookup_paciente.getCount(pacienteHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'paciente' and it contains more one result from keys :  paciente.id = '" + pacienteHashKey.id + "'");
								} // G 071
							

							pacienteStruct paciente = null;
                    		  	 
							   
                    		  	 
	       		  	    	pacienteStruct fromLookup_paciente = null;
							paciente = pacienteDefault;
										 
							
								 
							
							
								if (tHash_Lookup_paciente !=null && tHash_Lookup_paciente.hasNext()) { // G 099
								
							
								
								fromLookup_paciente = tHash_Lookup_paciente.next();

							
							
								} // G 099
							
							

							if(fromLookup_paciente != null) {
								paciente = fromLookup_paciente;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "profissional" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopprofissional = false;
       		  	    	
       		  	    	
 							profissionalStruct profissionalObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_profissional__id = atendimento.profissional_id;
	                        		    	if(exprKeyValue_profissional__id == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			profissionalHashKey.id = (long)(Long) exprKeyValue_profissional__id;
                        		    		}
                        		    		

								
		                        	profissionalHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_profissional.lookup( profissionalHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_profissional != null && tHash_Lookup_profissional.getCount(profissionalHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'profissional' and it contains more one result from keys :  profissional.id = '" + profissionalHashKey.id + "'");
								} // G 071
							

							profissionalStruct profissional = null;
                    		  	 
							   
                    		  	 
	       		  	    	profissionalStruct fromLookup_profissional = null;
							profissional = profissionalDefault;
										 
							
								 
							
							
								if (tHash_Lookup_profissional !=null && tHash_Lookup_profissional.hasNext()) { // G 099
								
							
								
								fromLookup_profissional = tHash_Lookup_profissional.next();

							
							
								} // G 099
							
							

							if(fromLookup_profissional != null) {
								profissional = fromLookup_profissional;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "especialidade" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopespecialidade = false;
       		  	    	
       		  	    	
 							especialidadeStruct especialidadeObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_especialidade__id = profissional.especialidade_id;
	                        		    	if(exprKeyValue_especialidade__id == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			especialidadeHashKey.id = (long)(Long) exprKeyValue_especialidade__id;
                        		    		}
                        		    		

								
		                        	especialidadeHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_especialidade.lookup( especialidadeHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_especialidade != null && tHash_Lookup_especialidade.getCount(especialidadeHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'especialidade' and it contains more one result from keys :  especialidade.id = '" + especialidadeHashKey.id + "'");
								} // G 071
							

							especialidadeStruct especialidade = null;
                    		  	 
							   
                    		  	 
	       		  	    	especialidadeStruct fromLookup_especialidade = null;
							especialidade = especialidadeDefault;
										 
							
								 
							
							
								if (tHash_Lookup_especialidade !=null && tHash_Lookup_especialidade.hasNext()) { // G 099
								
							
								
								fromLookup_especialidade = tHash_Lookup_especialidade.next();

							
							
								} // G 099
							
							

							if(fromLookup_especialidade != null) {
								especialidade = fromLookup_especialidade;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "unidade" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopunidade = false;
       		  	    	
       		  	    	
 							unidadeStruct unidadeObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_unidade__id = profissional.unidade_id;
	                        		    	if(exprKeyValue_unidade__id == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			unidadeHashKey.id = (long)(Long) exprKeyValue_unidade__id;
                        		    		}
                        		    		

								
		                        	unidadeHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_unidade.lookup( unidadeHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_unidade != null && tHash_Lookup_unidade.getCount(unidadeHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'unidade' and it contains more one result from keys :  unidade.id = '" + unidadeHashKey.id + "'");
								} // G 071
							

							unidadeStruct unidade = null;
                    		  	 
							   
                    		  	 
	       		  	    	unidadeStruct fromLookup_unidade = null;
							unidade = unidadeDefault;
										 
							
								 
							
							
								if (tHash_Lookup_unidade !=null && tHash_Lookup_unidade.hasNext()) { // G 099
								
							
								
								fromLookup_unidade = tHash_Lookup_unidade.next();

							
							
								} // G 099
							
							

							if(fromLookup_unidade != null) {
								unidade = fromLookup_unidade;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.convenio_nome = convenio.nome == null ? "Sem Convênio" : convenio.nome ;
Var.ausente = TalendDate.compareDate(atendimento.data, TalendDate.getCurrentDate(), "yyyy-MM-dd") == -1 && java.util.Arrays.asList("AGENDADO", "CONFIRMADO").contains(atendimento.status) ;
Var.dia_da_semana = TalendDate.getPartOfDate("DAY_OF_WEEK", atendimento.data) ;
Var.semana_no_mes = TalendDate.getPartOfDate("WEEK_OF_MONTH", atendimento.data) ;
Var.mes = TalendDate.getPartOfDate("MONTH", atendimento.data) ;
Var.idade = TalendDate.diffDateFloor(TalendDate.getCurrentDate(), paciente.data_nascimento, "yyyy") ;
Var.faixa_etaria = Var.idade > 0 && Var.idade <= 17 ? "Jovem" : ( Var.idade >= 18 && Var.idade <= 59 ? "Adulto" : "Idoso" ) ;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.atendimento_id = atendimento.id ;
out1_tmp.atendimento_data = atendimento.data ;
out1_tmp.atendimento_hora = atendimento.hora ;
out1_tmp.atendimento_status = atendimento.status ;
out1_tmp.atendimento_dia_da_semana = Var.dia_da_semana ;
out1_tmp.atendimento_semana_no_mes = Var.semana_no_mes ;
out1_tmp.atendimento_mes = Var.mes ;
out1_tmp.profissional_nome = profissional.nome ;
out1_tmp.especialidade_nome = especialidade.nome ;
out1_tmp.unidade_nome = unidade.nome ;
out1_tmp.convenio_nome = Var.convenio_nome;
out1_tmp.paciente_nome = paciente.nome ;
out1_tmp.paciente_sexo = paciente.sexo ;
out1_tmp.paciente_grupo_sanguineo = paciente.grupo_sanguineo ;
out1_tmp.paciente_data_nascimento = paciente.data_nascimento ;
out1_tmp.paciente_ausente = Var.ausente ;
out1_tmp.paciente_idade = Var.idade ;
out1_tmp.paciente_faixa_etaria = Var.faixa_etaria ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					


	row1 = new row1Struct();
						
	row1.atendimento_id = out1.atendimento_id;								
	row1.atendimento_data = out1.atendimento_data;								
	row1.atendimento_hora = out1.atendimento_hora;								
	row1.atendimento_status = out1.atendimento_status;								
	row1.atendimento_dia_da_semana = out1.atendimento_dia_da_semana;								
	row1.atendimento_semana_no_mes = out1.atendimento_semana_no_mes;								
	row1.atendimento_mes = out1.atendimento_mes;								
	row1.profissional_nome = out1.profissional_nome;								
	row1.especialidade_nome = out1.especialidade_nome;								
	row1.unidade_nome = out1.unidade_nome;								
	row1.convenio_nome = out1.convenio_nome;								
	row1.paciente_nome = out1.paciente_nome;								
	row1.paciente_sexo = out1.paciente_sexo;								
	row1.paciente_grupo_sanguineo = out1.paciente_grupo_sanguineo;								
	row1.paciente_data_nascimento = out1.paciente_data_nascimento;								
	row1.paciente_ausente = out1.paciente_ausente;								
	row1.paciente_idade = out1.paciente_idade;								
	row1.paciente_faixa_etaria = out1.paciente_faixa_etaria;			
	row2 = new row2Struct();
						
	row2.atendimento_id = out1.atendimento_id;								
	row2.atendimento_data = out1.atendimento_data;								
	row2.atendimento_hora = out1.atendimento_hora;								
	row2.atendimento_status = out1.atendimento_status;								
	row2.atendimento_dia_da_semana = out1.atendimento_dia_da_semana;								
	row2.atendimento_semana_no_mes = out1.atendimento_semana_no_mes;								
	row2.atendimento_mes = out1.atendimento_mes;								
	row2.profissional_nome = out1.profissional_nome;								
	row2.especialidade_nome = out1.especialidade_nome;								
	row2.unidade_nome = out1.unidade_nome;								
	row2.convenio_nome = out1.convenio_nome;								
	row2.paciente_nome = out1.paciente_nome;								
	row2.paciente_sexo = out1.paciente_sexo;								
	row2.paciente_grupo_sanguineo = out1.paciente_grupo_sanguineo;								
	row2.paciente_data_nascimento = out1.paciente_data_nascimento;								
	row2.paciente_ausente = out1.paciente_ausente;								
	row2.paciente_idade = out1.paciente_idade;								
	row2.paciente_faixa_etaria = out1.paciente_faixa_etaria;			
	row3 = new row3Struct();
						
	row3.atendimento_id = out1.atendimento_id;								
	row3.atendimento_data = out1.atendimento_data;								
	row3.atendimento_hora = out1.atendimento_hora;								
	row3.atendimento_status = out1.atendimento_status;								
	row3.atendimento_dia_da_semana = out1.atendimento_dia_da_semana;								
	row3.atendimento_semana_no_mes = out1.atendimento_semana_no_mes;								
	row3.atendimento_mes = out1.atendimento_mes;								
	row3.profissional_nome = out1.profissional_nome;								
	row3.especialidade_nome = out1.especialidade_nome;								
	row3.unidade_nome = out1.unidade_nome;								
	row3.convenio_nome = out1.convenio_nome;								
	row3.paciente_nome = out1.paciente_nome;								
	row3.paciente_sexo = out1.paciente_sexo;								
	row3.paciente_grupo_sanguineo = out1.paciente_grupo_sanguineo;								
	row3.paciente_data_nascimento = out1.paciente_data_nascimento;								
	row3.paciente_ausente = out1.paciente_ausente;								
	row3.paciente_idade = out1.paciente_idade;								
	row3.paciente_faixa_etaria = out1.paciente_faixa_etaria;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */
	
	/**
	 * [tReplicate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 process_data_begin ] stop
 */

	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					



        whetherReject_tDBOutput_1 = false;
                        pstmt_tDBOutput_1.setLong(1, row1.atendimento_id);

                        if(row1.atendimento_data != null) {
date_tDBOutput_1 = row1.atendimento_data.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(2, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.DATE);
}

                        if(row1.atendimento_hora == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, row1.atendimento_hora);
}

                        if(row1.atendimento_status == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, row1.atendimento_status);
}

                        pstmt_tDBOutput_1.setInt(5, row1.atendimento_dia_da_semana);

                        pstmt_tDBOutput_1.setInt(6, row1.atendimento_semana_no_mes);

                        pstmt_tDBOutput_1.setInt(7, row1.atendimento_mes);

                        if(row1.profissional_nome == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, row1.profissional_nome);
}

                        if(row1.especialidade_nome == null) {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(9, row1.especialidade_nome);
}

                        if(row1.unidade_nome == null) {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(10, row1.unidade_nome);
}

                        if(row1.convenio_nome == null) {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(11, row1.convenio_nome);
}

                        if(row1.paciente_nome == null) {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(12, row1.paciente_nome);
}

                        if(row1.paciente_sexo == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, row1.paciente_sexo);
}

                        if(row1.paciente_grupo_sanguineo == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, row1.paciente_grupo_sanguineo);
}

                        if(row1.paciente_data_nascimento != null) {
date_tDBOutput_1 = row1.paciente_data_nascimento.getTime();
if(date_tDBOutput_1 < year1_tDBOutput_1 || date_tDBOutput_1 >= year10000_tDBOutput_1) {
pstmt_tDBOutput_1.setString(15, "0000-00-00 00:00:00");
} else {pstmt_tDBOutput_1.setTimestamp(15, new java.sql.Timestamp(date_tDBOutput_1));
}
} else {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.DATE);
}

                        pstmt_tDBOutput_1.setBoolean(16, row1.paciente_ausente);

                        pstmt_tDBOutput_1.setLong(17, row1.paciente_idade);

                        if(row1.paciente_faixa_etaria == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(18, row1.paciente_faixa_etaria);
}

                try {
                    nb_line_tDBOutput_1++;
                    int processedCount_tDBOutput_1 = pstmt_tDBOutput_1.executeUpdate();
                    insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                    whetherReject_tDBOutput_1 = true;
                            System.err.print(e.getMessage());
                }
                commitCounter_tDBOutput_1++;

                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

                try {
                        int countSum_tDBOutput_1 = 0;
                        for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
                            countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
                        }
                        rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
                        insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                    int countSum_tDBOutput_1 = 0;
                    for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }
                    rowsToCommitCount_tDBOutput_1 += countSum_tDBOutput_1;
                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
                    System.err.println(e.getMessage());

                }
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                    }
                    conn_tDBOutput_1.commit();
                    if(rowsToCommitCount_tDBOutput_1 != 0){
                        rowsToCommitCount_tDBOutput_1 = 0;
                    }
                    commitCounter_tDBOutput_1=0;

                }


 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */




	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.atendimento_id)							
				);


							  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.atendimento_data != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(row2.atendimento_data, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.atendimento_hora != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.atendimento_hora)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.atendimento_status != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.atendimento_status)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.atendimento_dia_da_semana)							
				);


							  			

    			strBuffer_tLogRow_1.append("|");
    			


              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.atendimento_semana_no_mes)							
				);


							  			

    			strBuffer_tLogRow_1.append("|");
    			


              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.atendimento_mes)							
				);


							  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.profissional_nome != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.profissional_nome)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.especialidade_nome != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.especialidade_nome)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.unidade_nome != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.unidade_nome)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.convenio_nome != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.convenio_nome)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.paciente_nome != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.paciente_nome)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.paciente_sexo != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.paciente_sexo)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.paciente_grupo_sanguineo != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.paciente_grupo_sanguineo)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.paciente_data_nascimento != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(row2.paciente_data_nascimento, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.paciente_ausente)							
				);


							  			

    			strBuffer_tLogRow_1.append("|");
    			


              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.paciente_idade)							
				);


							  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row2.paciente_faixa_etaria != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row2.paciente_faixa_etaria)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


                        String[] rowtFileOutputDelimited_1=new String[18];
                            rowtFileOutputDelimited_1[0]=String.valueOf(row3.atendimento_id);
                            rowtFileOutputDelimited_1[1]=row3.atendimento_data == null ? null : FormatterUtils.format_Date(row3.atendimento_data, "yyyy-MM-dd");
                            rowtFileOutputDelimited_1[2]=row3.atendimento_hora == null ? null : row3.atendimento_hora;
                            rowtFileOutputDelimited_1[3]=row3.atendimento_status == null ? null : row3.atendimento_status;
                            rowtFileOutputDelimited_1[4]=String.valueOf(row3.atendimento_dia_da_semana);
                            rowtFileOutputDelimited_1[5]=String.valueOf(row3.atendimento_semana_no_mes);
                            rowtFileOutputDelimited_1[6]=String.valueOf(row3.atendimento_mes);
                            rowtFileOutputDelimited_1[7]=row3.profissional_nome == null ? null : row3.profissional_nome;
                            rowtFileOutputDelimited_1[8]=row3.especialidade_nome == null ? null : row3.especialidade_nome;
                            rowtFileOutputDelimited_1[9]=row3.unidade_nome == null ? null : row3.unidade_nome;
                            rowtFileOutputDelimited_1[10]=row3.convenio_nome == null ? null : row3.convenio_nome;
                            rowtFileOutputDelimited_1[11]=row3.paciente_nome == null ? null : row3.paciente_nome;
                            rowtFileOutputDelimited_1[12]=row3.paciente_sexo == null ? null : row3.paciente_sexo;
                            rowtFileOutputDelimited_1[13]=row3.paciente_grupo_sanguineo == null ? null : row3.paciente_grupo_sanguineo;
                            rowtFileOutputDelimited_1[14]=row3.paciente_data_nascimento == null ? null : FormatterUtils.format_Date(row3.paciente_data_nascimento, "yyyy-MM-dd");
                            rowtFileOutputDelimited_1[15]=String.valueOf(row3.paciente_ausente);
                            rowtFileOutputDelimited_1[16]=String.valueOf(row3.paciente_idade);
                            rowtFileOutputDelimited_1[17]=row3.paciente_faixa_etaria == null ? null : row3.paciente_faixa_etaria;
                nb_line_tFileOutputDelimited_1++;
                resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
                                       CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);
		


 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_convenio != null) {
						tHash_Lookup_convenio.endGet();
					}
					globalMap.remove( "tHash_Lookup_convenio" );

					
					
				
					if(tHash_Lookup_paciente != null) {
						tHash_Lookup_paciente.endGet();
					}
					globalMap.remove( "tHash_Lookup_paciente" );

					
					
				
					if(tHash_Lookup_profissional != null) {
						tHash_Lookup_profissional.endGet();
					}
					globalMap.remove( "tHash_Lookup_profissional" );

					
					
				
					if(tHash_Lookup_especialidade != null) {
						tHash_Lookup_especialidade.endGet();
					}
					globalMap.remove( "tHash_Lookup_especialidade" );

					
					
				
					if(tHash_Lookup_unidade != null) {
						tHash_Lookup_unidade.endGet();
					}
					globalMap.remove( "tHash_Lookup_unidade" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"atendimento");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());




/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



	

        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
    	if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
    		
    	}
    	conn_tDBOutput_1.commit();
    	if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {
    		
			rowsToCommitCount_tDBOutput_1 = 0;
    	}
		commitCounter_tDBOutput_1 = 0;
    	
		
    	conn_tDBOutput_1 .close();
    	
    	resourceMap.put("finish_tDBOutput_1", true);
    	

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */




	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
		
				
					if(CsvWritertFileOutputDelimited_1!=null) {
				    	CsvWritertFileOutputDelimited_1.close();
				    }
					
		    	globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_convenio"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_paciente"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_profissional"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_especialidade"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_unidade"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */




	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */




	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
			
					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter)resourceMap.get("CsvWriter_tFileOutputDelimited_1");
					
						if(CsvWritertFileOutputDelimited_1!=null) {
					    	CsvWritertFileOutputDelimited_1.close();
					    }
						
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class convenioStruct implements routines.system.IPersistableComparableLookupRow<convenioStruct> {
    final static byte[] commonByteArrayLock_SGCM_TURMA4_ETL = new byte[0];
    static byte[] commonByteArray_SGCM_TURMA4_ETL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public boolean ativo;

				public boolean getAtivo () {
					return this.ativo;
				}
				
			    public String cnpj;

				public String getCnpj () {
					return this.cnpj;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String nome;

				public String getNome () {
					return this.nome;
				}
				
			    public String razao_social;

				public String getRazao_social () {
					return this.razao_social;
				}
				
			    public String representante;

				public String getRepresentante () {
					return this.representante;
				}
				
			    public String telefone;

				public String getTelefone () {
					return this.telefone;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final convenioStruct other = (convenioStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(convenioStruct other) {

		other.id = this.id;
	            other.ativo = this.ativo;
	            other.cnpj = this.cnpj;
	            other.email = this.email;
	            other.nome = this.nome;
	            other.razao_social = this.razao_social;
	            other.representante = this.representante;
	            other.telefone = this.telefone;
	            
	}

	public void copyKeysDataTo(convenioStruct other) {

		other.id = this.id;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ativo = dis.readBoolean();
					
						this.cnpj = readString(dis,ois);
					
						this.email = readString(dis,ois);
					
						this.nome = readString(dis,ois);
					
						this.razao_social = readString(dis,ois);
					
						this.representante = readString(dis,ois);
					
						this.telefone = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ativo = objectIn.readBoolean();
					
						this.cnpj = readString(dis,objectIn);
					
						this.email = readString(dis,objectIn);
					
						this.nome = readString(dis,objectIn);
					
						this.razao_social = readString(dis,objectIn);
					
						this.representante = readString(dis,objectIn);
					
						this.telefone = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeBoolean(this.ativo);
					
						writeString(this.cnpj, dos, oos);
					
						writeString(this.email, dos, oos);
					
						writeString(this.nome, dos, oos);
					
						writeString(this.razao_social, dos, oos);
					
						writeString(this.representante, dos, oos);
					
						writeString(this.telefone, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeBoolean(this.ativo);
					
						writeString(this.cnpj, dos, objectOut);
					
						writeString(this.email, dos, objectOut);
					
						writeString(this.nome, dos, objectOut);
					
						writeString(this.razao_social, dos, objectOut);
					
						writeString(this.representante, dos, objectOut);
					
						writeString(this.telefone, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",ativo="+String.valueOf(ativo));
		sb.append(",cnpj="+cnpj);
		sb.append(",email="+email);
		sb.append(",nome="+nome);
		sb.append(",razao_social="+razao_social);
		sb.append(",representante="+representante);
		sb.append(",telefone="+telefone);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(convenioStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		convenioStruct convenio = new convenioStruct();




	
	/**
	 * [tAdvancedHash_convenio begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_convenio", false);
		start_Hash.put("tAdvancedHash_convenio", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_convenio";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"convenio");
					}
				
		int tos_count_tAdvancedHash_convenio = 0;
		

			   		// connection name:convenio
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(convenio,convenio) | target node:tAdvancedHash_convenio - inputs:(convenio) outputs:()
			   		// linked node: tMap_1 - inputs:(atendimento,convenio,paciente,profissional,especialidade,unidade) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_convenio = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<convenioStruct> tHash_Lookup_convenio =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<convenioStruct>getLookup(matchingModeEnum_convenio);
	   						   
		   	   	   globalMap.put("tHash_Lookup_convenio", tHash_Lookup_convenio);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_convenio begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
		    calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "root";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:Y/IePz9WubWL79WtbeBqQ9Aj5WCbIFDAiqGNnXdayMk=");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
        String properties_tDBInput_2 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1&serverTimezone=America/Bogota";
        if (properties_tDBInput_2 == null || properties_tDBInput_2.trim().length() == 0) {
            properties_tDBInput_2 = "";
        }
        String url_tDBInput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "sgcm" + "?" + properties_tDBInput_2;
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT \n  `convenio`.`id`, \n  `convenio`.`ativo`, \n  `convenio`.`cnpj`, \n  `convenio`.`email`, \n  `convenio`.`nome`, \n "
+" `convenio`.`razao_social`, \n  `convenio`.`representante`, \n  `convenio`.`telefone`\nFROM `convenio`";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								convenio.id = 0;
							} else {
		                          
            convenio.id = rs_tDBInput_2.getLong(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								convenio.ativo = false;
							} else {
	                         		
            convenio.ativo = rs_tDBInput_2.getBoolean(2);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								convenio.cnpj = null;
							} else {
	                         		
        	convenio.cnpj = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								convenio.email = null;
							} else {
	                         		
        	convenio.email = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								convenio.nome = null;
							} else {
	                         		
        	convenio.nome = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								convenio.razao_social = null;
							} else {
	                         		
        	convenio.razao_social = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								convenio.representante = null;
							} else {
	                         		
        	convenio.representante = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								convenio.telefone = null;
							} else {
	                         		
        	convenio.telefone = routines.system.JDBCUtil.getString(rs_tDBInput_2, 8, false);
		                    }
					

 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_convenio main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_convenio";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"convenio"
						
						);
					}
					


			   
			   

					convenioStruct convenio_HashRow = new convenioStruct();
		   	   	   
				
				convenio_HashRow.id = convenio.id;
				
				convenio_HashRow.ativo = convenio.ativo;
				
				convenio_HashRow.cnpj = convenio.cnpj;
				
				convenio_HashRow.email = convenio.email;
				
				convenio_HashRow.nome = convenio.nome;
				
				convenio_HashRow.razao_social = convenio.razao_social;
				
				convenio_HashRow.representante = convenio.representante;
				
				convenio_HashRow.telefone = convenio.telefone;
				
			tHash_Lookup_convenio.put(convenio_HashRow);
			
            




 


	tos_count_tAdvancedHash_convenio++;

/**
 * [tAdvancedHash_convenio main ] stop
 */
	
	/**
	 * [tAdvancedHash_convenio process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_convenio";

	

 



/**
 * [tAdvancedHash_convenio process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_convenio process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_convenio";

	

 



/**
 * [tAdvancedHash_convenio process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);
		


 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_convenio end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_convenio";

	

tHash_Lookup_convenio.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"convenio");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_convenio", true);
end_Hash.put("tAdvancedHash_convenio", System.currentTimeMillis());




/**
 * [tAdvancedHash_convenio end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_convenio finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_convenio";

	

 



/**
 * [tAdvancedHash_convenio finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class pacienteStruct implements routines.system.IPersistableComparableLookupRow<pacienteStruct> {
    final static byte[] commonByteArrayLock_SGCM_TURMA4_ETL = new byte[0];
    static byte[] commonByteArray_SGCM_TURMA4_ETL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String cep;

				public String getCep () {
					return this.cep;
				}
				
			    public String cidade;

				public String getCidade () {
					return this.cidade;
				}
				
			    public java.util.Date data_nascimento;

				public java.util.Date getData_nascimento () {
					return this.data_nascimento;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String endereco;

				public String getEndereco () {
					return this.endereco;
				}
				
			    public String estado;

				public String getEstado () {
					return this.estado;
				}
				
			    public String grupo_sanguineo;

				public String getGrupo_sanguineo () {
					return this.grupo_sanguineo;
				}
				
			    public String nome;

				public String getNome () {
					return this.nome;
				}
				
			    public String sexo;

				public String getSexo () {
					return this.sexo;
				}
				
			    public String telefone;

				public String getTelefone () {
					return this.telefone;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final pacienteStruct other = (pacienteStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(pacienteStruct other) {

		other.id = this.id;
	            other.cep = this.cep;
	            other.cidade = this.cidade;
	            other.data_nascimento = this.data_nascimento;
	            other.email = this.email;
	            other.endereco = this.endereco;
	            other.estado = this.estado;
	            other.grupo_sanguineo = this.grupo_sanguineo;
	            other.nome = this.nome;
	            other.sexo = this.sexo;
	            other.telefone = this.telefone;
	            
	}

	public void copyKeysDataTo(pacienteStruct other) {

		other.id = this.id;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.cep = readString(dis,ois);
					
						this.cidade = readString(dis,ois);
					
						this.data_nascimento = readDate(dis,ois);
					
						this.email = readString(dis,ois);
					
						this.endereco = readString(dis,ois);
					
						this.estado = readString(dis,ois);
					
						this.grupo_sanguineo = readString(dis,ois);
					
						this.nome = readString(dis,ois);
					
						this.sexo = readString(dis,ois);
					
						this.telefone = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.cep = readString(dis,objectIn);
					
						this.cidade = readString(dis,objectIn);
					
						this.data_nascimento = readDate(dis,objectIn);
					
						this.email = readString(dis,objectIn);
					
						this.endereco = readString(dis,objectIn);
					
						this.estado = readString(dis,objectIn);
					
						this.grupo_sanguineo = readString(dis,objectIn);
					
						this.nome = readString(dis,objectIn);
					
						this.sexo = readString(dis,objectIn);
					
						this.telefone = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.cep, dos, oos);
					
						writeString(this.cidade, dos, oos);
					
						writeDate(this.data_nascimento, dos, oos);
					
						writeString(this.email, dos, oos);
					
						writeString(this.endereco, dos, oos);
					
						writeString(this.estado, dos, oos);
					
						writeString(this.grupo_sanguineo, dos, oos);
					
						writeString(this.nome, dos, oos);
					
						writeString(this.sexo, dos, oos);
					
						writeString(this.telefone, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.cep, dos, objectOut);
					
						writeString(this.cidade, dos, objectOut);
					
						writeDate(this.data_nascimento, dos, objectOut);
					
						writeString(this.email, dos, objectOut);
					
						writeString(this.endereco, dos, objectOut);
					
						writeString(this.estado, dos, objectOut);
					
						writeString(this.grupo_sanguineo, dos, objectOut);
					
						writeString(this.nome, dos, objectOut);
					
						writeString(this.sexo, dos, objectOut);
					
						writeString(this.telefone, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",cep="+cep);
		sb.append(",cidade="+cidade);
		sb.append(",data_nascimento="+String.valueOf(data_nascimento));
		sb.append(",email="+email);
		sb.append(",endereco="+endereco);
		sb.append(",estado="+estado);
		sb.append(",grupo_sanguineo="+grupo_sanguineo);
		sb.append(",nome="+nome);
		sb.append(",sexo="+sexo);
		sb.append(",telefone="+telefone);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(pacienteStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		pacienteStruct paciente = new pacienteStruct();




	
	/**
	 * [tAdvancedHash_paciente begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_paciente", false);
		start_Hash.put("tAdvancedHash_paciente", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_paciente";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"paciente");
					}
				
		int tos_count_tAdvancedHash_paciente = 0;
		

			   		// connection name:paciente
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_1) outputs:(paciente,paciente) | target node:tAdvancedHash_paciente - inputs:(paciente) outputs:()
			   		// linked node: tMap_1 - inputs:(atendimento,convenio,paciente,profissional,especialidade,unidade) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_paciente = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<pacienteStruct> tHash_Lookup_paciente =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<pacienteStruct>getLookup(matchingModeEnum_paciente);
	   						   
		   	   	   globalMap.put("tHash_Lookup_paciente", tHash_Lookup_paciente);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_paciente begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
		    calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "root";
				
				 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:a9Gde7TMRFyCY67YwSYu6WHvDi9T35a3TaJag/5u3UI=");
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
        String properties_tDBInput_4 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1&serverTimezone=America/Bogota";
        if (properties_tDBInput_4 == null || properties_tDBInput_4.trim().length() == 0) {
            properties_tDBInput_4 = "";
        }
        String url_tDBInput_4 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "sgcm" + "?" + properties_tDBInput_4;
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT \n  `paciente`.`id`, \n  `paciente`.`cep`, \n  `paciente`.`cidade`, \n  `paciente`.`data_nascimento`, \n  `paciente`."
+"`email`, \n  `paciente`.`endereco`, \n  `paciente`.`estado`, \n  `paciente`.`grupo_sanguineo`, \n  `paciente`.`nome`, \n  `pa"
+"ciente`.`sexo`, \n  `paciente`.`telefone`\nFROM `paciente`";
		    

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								paciente.id = 0;
							} else {
		                          
            paciente.id = rs_tDBInput_4.getLong(1);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								paciente.cep = null;
							} else {
	                         		
        	paciente.cep = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								paciente.cidade = null;
							} else {
	                         		
        	paciente.cidade = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								paciente.data_nascimento = null;
							} else {
										
				if(rs_tDBInput_4.getString(4) != null) {
					String dateString_tDBInput_4 = rs_tDBInput_4.getString(4);
					if (!("0000-00-00").equals(dateString_tDBInput_4) && !("0000-00-00 00:00:00").equals(dateString_tDBInput_4)) {
						paciente.data_nascimento = rs_tDBInput_4.getTimestamp(4);
					} else {
						paciente.data_nascimento = (java.util.Date) year0_tDBInput_4.clone();
					}
				} else {
					paciente.data_nascimento =  null;
				}
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								paciente.email = null;
							} else {
	                         		
        	paciente.email = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								paciente.endereco = null;
							} else {
	                         		
        	paciente.endereco = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								paciente.estado = null;
							} else {
	                         		
        	paciente.estado = routines.system.JDBCUtil.getString(rs_tDBInput_4, 7, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								paciente.grupo_sanguineo = null;
							} else {
	                         		
        	paciente.grupo_sanguineo = routines.system.JDBCUtil.getString(rs_tDBInput_4, 8, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								paciente.nome = null;
							} else {
	                         		
        	paciente.nome = routines.system.JDBCUtil.getString(rs_tDBInput_4, 9, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								paciente.sexo = null;
							} else {
	                         		
        	paciente.sexo = routines.system.JDBCUtil.getString(rs_tDBInput_4, 10, false);
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								paciente.telefone = null;
							} else {
	                         		
        	paciente.telefone = routines.system.JDBCUtil.getString(rs_tDBInput_4, 11, false);
		                    }
					

 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_paciente main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_paciente";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"paciente"
						
						);
					}
					


			   
			   

					pacienteStruct paciente_HashRow = new pacienteStruct();
		   	   	   
				
				paciente_HashRow.id = paciente.id;
				
				paciente_HashRow.cep = paciente.cep;
				
				paciente_HashRow.cidade = paciente.cidade;
				
				paciente_HashRow.data_nascimento = paciente.data_nascimento;
				
				paciente_HashRow.email = paciente.email;
				
				paciente_HashRow.endereco = paciente.endereco;
				
				paciente_HashRow.estado = paciente.estado;
				
				paciente_HashRow.grupo_sanguineo = paciente.grupo_sanguineo;
				
				paciente_HashRow.nome = paciente.nome;
				
				paciente_HashRow.sexo = paciente.sexo;
				
				paciente_HashRow.telefone = paciente.telefone;
				
			tHash_Lookup_paciente.put(paciente_HashRow);
			
            




 


	tos_count_tAdvancedHash_paciente++;

/**
 * [tAdvancedHash_paciente main ] stop
 */
	
	/**
	 * [tAdvancedHash_paciente process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_paciente";

	

 



/**
 * [tAdvancedHash_paciente process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_paciente process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_paciente";

	

 



/**
 * [tAdvancedHash_paciente process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);
		


 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_paciente end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_paciente";

	

tHash_Lookup_paciente.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"paciente");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_paciente", true);
end_Hash.put("tAdvancedHash_paciente", System.currentTimeMillis());




/**
 * [tAdvancedHash_paciente end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_paciente finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_paciente";

	

 



/**
 * [tAdvancedHash_paciente finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class profissionalStruct implements routines.system.IPersistableComparableLookupRow<profissionalStruct> {
    final static byte[] commonByteArrayLock_SGCM_TURMA4_ETL = new byte[0];
    static byte[] commonByteArray_SGCM_TURMA4_ETL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				
			    public String nome;

				public String getNome () {
					return this.nome;
				}
				
			    public String registro_conselho;

				public String getRegistro_conselho () {
					return this.registro_conselho;
				}
				
			    public String telefone;

				public String getTelefone () {
					return this.telefone;
				}
				
			    public long especialidade_id;

				public long getEspecialidade_id () {
					return this.especialidade_id;
				}
				
			    public long unidade_id;

				public long getUnidade_id () {
					return this.unidade_id;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final profissionalStruct other = (profissionalStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(profissionalStruct other) {

		other.id = this.id;
	            other.email = this.email;
	            other.nome = this.nome;
	            other.registro_conselho = this.registro_conselho;
	            other.telefone = this.telefone;
	            other.especialidade_id = this.especialidade_id;
	            other.unidade_id = this.unidade_id;
	            
	}

	public void copyKeysDataTo(profissionalStruct other) {

		other.id = this.id;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.email = readString(dis,ois);
					
						this.nome = readString(dis,ois);
					
						this.registro_conselho = readString(dis,ois);
					
						this.telefone = readString(dis,ois);
					
			            this.especialidade_id = dis.readLong();
					
			            this.unidade_id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.email = readString(dis,objectIn);
					
						this.nome = readString(dis,objectIn);
					
						this.registro_conselho = readString(dis,objectIn);
					
						this.telefone = readString(dis,objectIn);
					
			            this.especialidade_id = objectIn.readLong();
					
			            this.unidade_id = objectIn.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.email, dos, oos);
					
						writeString(this.nome, dos, oos);
					
						writeString(this.registro_conselho, dos, oos);
					
						writeString(this.telefone, dos, oos);
					
		            	dos.writeLong(this.especialidade_id);
					
		            	dos.writeLong(this.unidade_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.email, dos, objectOut);
					
						writeString(this.nome, dos, objectOut);
					
						writeString(this.registro_conselho, dos, objectOut);
					
						writeString(this.telefone, dos, objectOut);
					
					objectOut.writeLong(this.especialidade_id);
					
					objectOut.writeLong(this.unidade_id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",email="+email);
		sb.append(",nome="+nome);
		sb.append(",registro_conselho="+registro_conselho);
		sb.append(",telefone="+telefone);
		sb.append(",especialidade_id="+String.valueOf(especialidade_id));
		sb.append(",unidade_id="+String.valueOf(unidade_id));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(profissionalStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		profissionalStruct profissional = new profissionalStruct();




	
	/**
	 * [tAdvancedHash_profissional begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_profissional", false);
		start_Hash.put("tAdvancedHash_profissional", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_profissional";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"profissional");
					}
				
		int tos_count_tAdvancedHash_profissional = 0;
		

			   		// connection name:profissional
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_1) outputs:(profissional,profissional) | target node:tAdvancedHash_profissional - inputs:(profissional) outputs:()
			   		// linked node: tMap_1 - inputs:(atendimento,convenio,paciente,profissional,especialidade,unidade) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_profissional = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<profissionalStruct> tHash_Lookup_profissional =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<profissionalStruct>getLookup(matchingModeEnum_profissional);
	   						   
		   	   	   globalMap.put("tHash_Lookup_profissional", tHash_Lookup_profissional);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_profissional begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_5 = java.util.Calendar.getInstance();
		    calendar_tDBInput_5.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_5 = calendar_tDBInput_5.getTime();
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "root";
				
				 
	final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:p9S+YB6bZh+ZnX5sU9GmwURfJe9aKVHjwC9eS1Vz9lg=");
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
        String properties_tDBInput_5 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1&serverTimezone=America/Bogota";
        if (properties_tDBInput_5 == null || properties_tDBInput_5.trim().length() == 0) {
            properties_tDBInput_5 = "";
        }
        String url_tDBInput_5 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "sgcm" + "?" + properties_tDBInput_5;
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT \n  `profissional`.`id`, \n  `profissional`.`email`, \n  `profissional`.`nome`, \n  `profissional`.`registro_conselh"
+"o`, \n  `profissional`.`telefone`, \n  `profissional`.`especialidade_id`, \n  `profissional`.`unidade_id`\nFROM `profissiona"
+"l`";
		    

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								profissional.id = 0;
							} else {
		                          
            profissional.id = rs_tDBInput_5.getLong(1);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								profissional.email = null;
							} else {
	                         		
        	profissional.email = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								profissional.nome = null;
							} else {
	                         		
        	profissional.nome = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								profissional.registro_conselho = null;
							} else {
	                         		
        	profissional.registro_conselho = routines.system.JDBCUtil.getString(rs_tDBInput_5, 4, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								profissional.telefone = null;
							} else {
	                         		
        	profissional.telefone = routines.system.JDBCUtil.getString(rs_tDBInput_5, 5, false);
		                    }
							if(colQtyInRs_tDBInput_5 < 6) {
								profissional.especialidade_id = 0;
							} else {
		                          
            profissional.especialidade_id = rs_tDBInput_5.getLong(6);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 7) {
								profissional.unidade_id = 0;
							} else {
		                          
            profissional.unidade_id = rs_tDBInput_5.getLong(7);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					

 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_profissional main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_profissional";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"profissional"
						
						);
					}
					


			   
			   

					profissionalStruct profissional_HashRow = new profissionalStruct();
		   	   	   
				
				profissional_HashRow.id = profissional.id;
				
				profissional_HashRow.email = profissional.email;
				
				profissional_HashRow.nome = profissional.nome;
				
				profissional_HashRow.registro_conselho = profissional.registro_conselho;
				
				profissional_HashRow.telefone = profissional.telefone;
				
				profissional_HashRow.especialidade_id = profissional.especialidade_id;
				
				profissional_HashRow.unidade_id = profissional.unidade_id;
				
			tHash_Lookup_profissional.put(profissional_HashRow);
			
            




 


	tos_count_tAdvancedHash_profissional++;

/**
 * [tAdvancedHash_profissional main ] stop
 */
	
	/**
	 * [tAdvancedHash_profissional process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_profissional";

	

 



/**
 * [tAdvancedHash_profissional process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_profissional process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_profissional";

	

 



/**
 * [tAdvancedHash_profissional process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);
		


 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_profissional end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_profissional";

	

tHash_Lookup_profissional.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"profissional");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_profissional", true);
end_Hash.put("tAdvancedHash_profissional", System.currentTimeMillis());




/**
 * [tAdvancedHash_profissional end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_profissional finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_profissional";

	

 



/**
 * [tAdvancedHash_profissional finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class especialidadeStruct implements routines.system.IPersistableComparableLookupRow<especialidadeStruct> {
    final static byte[] commonByteArrayLock_SGCM_TURMA4_ETL = new byte[0];
    static byte[] commonByteArray_SGCM_TURMA4_ETL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String nome;

				public String getNome () {
					return this.nome;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final especialidadeStruct other = (especialidadeStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(especialidadeStruct other) {

		other.id = this.id;
	            other.nome = this.nome;
	            
	}

	public void copyKeysDataTo(especialidadeStruct other) {

		other.id = this.id;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nome = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.nome = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nome, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.nome, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",nome="+nome);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(especialidadeStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		especialidadeStruct especialidade = new especialidadeStruct();




	
	/**
	 * [tAdvancedHash_especialidade begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_especialidade", false);
		start_Hash.put("tAdvancedHash_especialidade", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_especialidade";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"especialidade");
					}
				
		int tos_count_tAdvancedHash_especialidade = 0;
		

			   		// connection name:especialidade
			   		// source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(especialidade,especialidade) | target node:tAdvancedHash_especialidade - inputs:(especialidade) outputs:()
			   		// linked node: tMap_1 - inputs:(atendimento,convenio,paciente,profissional,especialidade,unidade) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_especialidade = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<especialidadeStruct> tHash_Lookup_especialidade =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<especialidadeStruct>getLookup(matchingModeEnum_especialidade);
	   						   
		   	   	   globalMap.put("tHash_Lookup_especialidade", tHash_Lookup_especialidade);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_especialidade begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
		    calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "root";
				
				 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:3zEtHXZxllNrJKzvZ6LV5AsMm3/pGIqnW8Qi5M2qbQU=");
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
        String properties_tDBInput_3 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1&serverTimezone=America/Bogota";
        if (properties_tDBInput_3 == null || properties_tDBInput_3.trim().length() == 0) {
            properties_tDBInput_3 = "";
        }
        String url_tDBInput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "sgcm" + "?" + properties_tDBInput_3;
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT \n  `especialidade`.`id`, \n  `especialidade`.`nome`\nFROM `especialidade`";
		    

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								especialidade.id = 0;
							} else {
		                          
            especialidade.id = rs_tDBInput_3.getLong(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								especialidade.nome = null;
							} else {
	                         		
        	especialidade.nome = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_especialidade main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_especialidade";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"especialidade"
						
						);
					}
					


			   
			   

					especialidadeStruct especialidade_HashRow = new especialidadeStruct();
		   	   	   
				
				especialidade_HashRow.id = especialidade.id;
				
				especialidade_HashRow.nome = especialidade.nome;
				
			tHash_Lookup_especialidade.put(especialidade_HashRow);
			
            




 


	tos_count_tAdvancedHash_especialidade++;

/**
 * [tAdvancedHash_especialidade main ] stop
 */
	
	/**
	 * [tAdvancedHash_especialidade process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_especialidade";

	

 



/**
 * [tAdvancedHash_especialidade process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_especialidade process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_especialidade";

	

 



/**
 * [tAdvancedHash_especialidade process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);
		


 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_especialidade end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_especialidade";

	

tHash_Lookup_especialidade.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"especialidade");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_especialidade", true);
end_Hash.put("tAdvancedHash_especialidade", System.currentTimeMillis());




/**
 * [tAdvancedHash_especialidade end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_especialidade finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_especialidade";

	

 



/**
 * [tAdvancedHash_especialidade finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class unidadeStruct implements routines.system.IPersistableComparableLookupRow<unidadeStruct> {
    final static byte[] commonByteArrayLock_SGCM_TURMA4_ETL = new byte[0];
    static byte[] commonByteArray_SGCM_TURMA4_ETL = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String endereco;

				public String getEndereco () {
					return this.endereco;
				}
				
			    public String nome;

				public String getNome () {
					return this.nome;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final unidadeStruct other = (unidadeStruct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(unidadeStruct other) {

		other.id = this.id;
	            other.endereco = this.endereco;
	            other.nome = this.nome;
	            
	}

	public void copyKeysDataTo(unidadeStruct other) {

		other.id = this.id;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_SGCM_TURMA4_ETL) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.endereco = readString(dis,ois);
					
						this.nome = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.endereco = readString(dis,objectIn);
					
						this.nome = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.endereco, dos, oos);
					
						writeString(this.nome, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.endereco, dos, objectOut);
					
						writeString(this.nome, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",endereco="+endereco);
		sb.append(",nome="+nome);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(unidadeStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		unidadeStruct unidade = new unidadeStruct();




	
	/**
	 * [tAdvancedHash_unidade begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_unidade", false);
		start_Hash.put("tAdvancedHash_unidade", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_unidade";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"unidade");
					}
				
		int tos_count_tAdvancedHash_unidade = 0;
		

			   		// connection name:unidade
			   		// source node:tDBInput_6 - inputs:(after_tDBInput_1) outputs:(unidade,unidade) | target node:tAdvancedHash_unidade - inputs:(unidade) outputs:()
			   		// linked node: tMap_1 - inputs:(atendimento,convenio,paciente,profissional,especialidade,unidade) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_unidade = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<unidadeStruct> tHash_Lookup_unidade =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<unidadeStruct>getLookup(matchingModeEnum_unidade);
	   						   
		   	   	   globalMap.put("tHash_Lookup_unidade", tHash_Lookup_unidade);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_unidade begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
	
		    java.util.Calendar calendar_tDBInput_6 = java.util.Calendar.getInstance();
		    calendar_tDBInput_6.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tDBInput_6 = calendar_tDBInput_6.getTime();
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "com.mysql.cj.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "root";
				
				 
	final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:Mm+mWKSH76rdlgNZaOryKNfL03CuPp0amyoXF16Cm58=");
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
        String properties_tDBInput_6 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1&serverTimezone=America/Bogota";
        if (properties_tDBInput_6 == null || properties_tDBInput_6.trim().length() == 0) {
            properties_tDBInput_6 = "";
        }
        String url_tDBInput_6 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "sgcm" + "?" + properties_tDBInput_6;
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT \n  `unidade`.`id`, \n  `unidade`.`endereco`, \n  `unidade`.`nome`\nFROM `unidade`";
		    

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								unidade.id = 0;
							} else {
		                          
            unidade.id = rs_tDBInput_6.getLong(1);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								unidade.endereco = null;
							} else {
	                         		
        	unidade.endereco = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								unidade.nome = null;
							} else {
	                         		
        	unidade.nome = routines.system.JDBCUtil.getString(rs_tDBInput_6, 3, false);
		                    }
					

 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_unidade main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_unidade";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"unidade"
						
						);
					}
					


			   
			   

					unidadeStruct unidade_HashRow = new unidadeStruct();
		   	   	   
				
				unidade_HashRow.id = unidade.id;
				
				unidade_HashRow.endereco = unidade.endereco;
				
				unidade_HashRow.nome = unidade.nome;
				
			tHash_Lookup_unidade.put(unidade_HashRow);
			
            




 


	tos_count_tAdvancedHash_unidade++;

/**
 * [tAdvancedHash_unidade main ] stop
 */
	
	/**
	 * [tAdvancedHash_unidade process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_unidade";

	

 



/**
 * [tAdvancedHash_unidade process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_unidade process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_unidade";

	

 



/**
 * [tAdvancedHash_unidade process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
		if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
			
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
		
}

		   globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);
		


 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_unidade end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_unidade";

	

tHash_Lookup_unidade.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"unidade");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_unidade", true);
end_Hash.put("tAdvancedHash_unidade", System.currentTimeMillis());




/**
 * [tAdvancedHash_unidade end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_unidade finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_unidade";

	

 



/**
 * [tAdvancedHash_unidade finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final ETL ETLClass = new ETL();

        int exitCode = ETLClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ETL.class.getClassLoader().getResourceAsStream("sgcm_turma4/etl_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = ETL.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ETL");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     284350 characters generated by Talend Open Studio for Data Integration 
 *     on the 8 de dezembro de 2023 20:10:28 ACT
 ************************************************************************************************/